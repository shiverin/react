{"ast":null,"code":"'use client';\n\nimport { isObject, arrayToObjectNotation } from '@chakra-ui/utils';\nimport { getClosestValue } from './media-query.utils.mjs';\nimport { useBreakpoint } from './use-breakpoint.mjs';\nimport { useTheme } from '../system/use-theme.mjs';\n\nfunction useBreakpointValue(values, arg) {\n  var _theme$__breakpoints;\n\n  const opts = isObject(arg) ? arg : {\n    fallback: arg ?? \"base\"\n  };\n  const breakpoint = useBreakpoint(opts);\n  const theme = useTheme();\n  if (!breakpoint) return;\n  const breakpoints = Array.from(((_theme$__breakpoints = theme.__breakpoints) === null || _theme$__breakpoints === void 0 ? void 0 : _theme$__breakpoints.keys) || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(_ref => {\n    let [key, value] = _ref;\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { useBreakpointValue };","map":{"version":3,"names":["isObject","arrayToObjectNotation","getClosestValue","useBreakpoint","useTheme","useBreakpointValue","values","arg","opts","fallback","breakpoint","theme","breakpoints","Array","from","__breakpoints","keys","obj","isArray","Object","fromEntries","entries","map","key","value"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/dist/esm/media-query/use-breakpoint-value.mjs"],"sourcesContent":["'use client';\nimport { isObject, arrayToObjectNotation } from '@chakra-ui/utils';\nimport { getClosestValue } from './media-query.utils.mjs';\nimport { useBreakpoint } from './use-breakpoint.mjs';\nimport { useTheme } from '../system/use-theme.mjs';\n\nfunction useBreakpointValue(values, arg) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" };\n  const breakpoint = useBreakpoint(opts);\n  const theme = useTheme();\n  if (!breakpoint)\n    return;\n  const breakpoints = Array.from(theme.__breakpoints?.keys || []);\n  const obj = Array.isArray(values) ? Object.fromEntries(\n    Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n      ([key, value]) => [key, value]\n    )\n  ) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n\nexport { useBreakpointValue };\n"],"mappings":"AAAA;;AACA,SAASA,QAAT,EAAmBC,qBAAnB,QAAgD,kBAAhD;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,QAAT,QAAyB,yBAAzB;;AAEA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,GAApC,EAAyC;EAAA;;EACvC,MAAMC,IAAI,GAAGR,QAAQ,CAACO,GAAD,CAAR,GAAgBA,GAAhB,GAAsB;IAAEE,QAAQ,EAAEF,GAAG,IAAI;EAAnB,CAAnC;EACA,MAAMG,UAAU,GAAGP,aAAa,CAACK,IAAD,CAAhC;EACA,MAAMG,KAAK,GAAGP,QAAQ,EAAtB;EACA,IAAI,CAACM,UAAL,EACE;EACF,MAAME,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAW,yBAAAH,KAAK,CAACI,aAAN,8EAAqBC,IAArB,KAA6B,EAAxC,CAApB;EACA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,OAAN,CAAcZ,MAAd,IAAwBa,MAAM,CAACC,WAAP,CAClCD,MAAM,CAACE,OAAP,CAAepB,qBAAqB,CAACK,MAAD,EAASM,WAAT,CAApC,EAA2DU,GAA3D,CACE;IAAA,IAAC,CAACC,GAAD,EAAMC,KAAN,CAAD;IAAA,OAAkB,CAACD,GAAD,EAAMC,KAAN,CAAlB;EAAA,CADF,CADkC,CAAxB,GAIRlB,MAJJ;EAKA,OAAOJ,eAAe,CAACe,GAAD,EAAMP,UAAN,EAAkBE,WAAlB,CAAtB;AACD;;AAED,SAASP,kBAAT"},"metadata":{},"sourceType":"module"}