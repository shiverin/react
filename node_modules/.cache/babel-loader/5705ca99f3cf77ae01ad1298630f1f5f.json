{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { cx } from '@chakra-ui/utils';\nimport { useFormControlContext, useFormControlStyles } from './form-control.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\nconst FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = field?.getLabelProps(rest, ref) ?? {\n    ref,\n    ...rest\n  };\n  return /* @__PURE__ */jsxs(chakra.label, { ...ownProps,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: {\n      display: \"block\",\n      textAlign: \"start\",\n      ...styles\n    },\n    children: [children, field?.isRequired ? requiredIndicator : optionalIndicator]\n  });\n});\nFormLabel.displayName = \"FormLabel\";\nconst RequiredIndicator = forwardRef(function RequiredIndicator2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  if (!field?.isRequired) return null;\n  const className = cx(\"chakra-form__required-indicator\", props.className);\n  return /* @__PURE__ */jsx(chakra.span, { ...field?.getRequiredIndicatorProps(props, ref),\n    __css: styles.requiredIndicator,\n    className\n  });\n});\nRequiredIndicator.displayName = \"RequiredIndicator\";\nexport { FormLabel, RequiredIndicator };","map":{"version":3,"names":["jsxs","jsx","omitThemingProps","cx","useFormControlContext","useFormControlStyles","forwardRef","useStyleConfig","chakra","FormLabel","FormLabel2","passedProps","ref","styles","props","className","children","requiredIndicator","RequiredIndicator","optionalIndicator","rest","field","ownProps","getLabelProps","label","__css","display","textAlign","isRequired","displayName","RequiredIndicator2","span","getRequiredIndicatorProps"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/dist/esm/form-control/form-label.mjs"],"sourcesContent":["'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { cx } from '@chakra-ui/utils';\nimport { useFormControlContext, useFormControlStyles } from './form-control.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst FormLabel = forwardRef(\n  function FormLabel2(passedProps, ref) {\n    const styles = useStyleConfig(\"FormLabel\", passedProps);\n    const props = omitThemingProps(passedProps);\n    const {\n      className,\n      children,\n      requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n      optionalIndicator = null,\n      ...rest\n    } = props;\n    const field = useFormControlContext();\n    const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest };\n    return /* @__PURE__ */ jsxs(\n      chakra.label,\n      {\n        ...ownProps,\n        className: cx(\"chakra-form__label\", props.className),\n        __css: {\n          display: \"block\",\n          textAlign: \"start\",\n          ...styles\n        },\n        children: [\n          children,\n          field?.isRequired ? requiredIndicator : optionalIndicator\n        ]\n      }\n    );\n  }\n);\nFormLabel.displayName = \"FormLabel\";\nconst RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!field?.isRequired)\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field?.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport { FormLabel, RequiredIndicator };\n"],"mappings":"AAAA;;AACA,SAASA,IAAT,EAAeC,GAAf,QAA0B,mBAA1B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,QAA4D,oBAA5D;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,cAAT,QAA+B,gCAA/B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAC1B,SAASI,UAAT,CAAoBC,WAApB,EAAiCC,GAAjC,EAAsC;EACpC,MAAMC,MAAM,GAAGN,cAAc,CAAC,WAAD,EAAcI,WAAd,CAA7B;EACA,MAAMG,KAAK,GAAGZ,gBAAgB,CAACS,WAAD,CAA9B;EACA,MAAM;IACJI,SADI;IAEJC,QAFI;IAGJC,iBAAiB,GAAG,eAAgBhB,GAAG,CAACiB,iBAAD,EAAoB,EAApB,CAHnC;IAIJC,iBAAiB,GAAG,IAJhB;IAKJ,GAAGC;EALC,IAMFN,KANJ;EAOA,MAAMO,KAAK,GAAGjB,qBAAqB,EAAnC;EACA,MAAMkB,QAAQ,GAAGD,KAAK,EAAEE,aAAP,CAAqBH,IAArB,EAA2BR,GAA3B,KAAmC;IAAEA,GAAF;IAAO,GAAGQ;EAAV,CAApD;EACA,OAAO,eAAgBpB,IAAI,CACzBQ,MAAM,CAACgB,KADkB,EAEzB,EACE,GAAGF,QADL;IAEEP,SAAS,EAAEZ,EAAE,CAAC,oBAAD,EAAuBW,KAAK,CAACC,SAA7B,CAFf;IAGEU,KAAK,EAAE;MACLC,OAAO,EAAE,OADJ;MAELC,SAAS,EAAE,OAFN;MAGL,GAAGd;IAHE,CAHT;IAQEG,QAAQ,EAAE,CACRA,QADQ,EAERK,KAAK,EAAEO,UAAP,GAAoBX,iBAApB,GAAwCE,iBAFhC;EARZ,CAFyB,CAA3B;AAgBD,CA7ByB,CAA5B;AA+BAV,SAAS,CAACoB,WAAV,GAAwB,WAAxB;AACA,MAAMX,iBAAiB,GAAGZ,UAAU,CAClC,SAASwB,kBAAT,CAA4BhB,KAA5B,EAAmCF,GAAnC,EAAwC;EACtC,MAAMS,KAAK,GAAGjB,qBAAqB,EAAnC;EACA,MAAMS,MAAM,GAAGR,oBAAoB,EAAnC;EACA,IAAI,CAACgB,KAAK,EAAEO,UAAZ,EACE,OAAO,IAAP;EACF,MAAMb,SAAS,GAAGZ,EAAE,CAAC,iCAAD,EAAoCW,KAAK,CAACC,SAA1C,CAApB;EACA,OAAO,eAAgBd,GAAG,CACxBO,MAAM,CAACuB,IADiB,EAExB,EACE,GAAGV,KAAK,EAAEW,yBAAP,CAAiClB,KAAjC,EAAwCF,GAAxC,CADL;IAEEa,KAAK,EAAEZ,MAAM,CAACI,iBAFhB;IAGEF;EAHF,CAFwB,CAA1B;AAQD,CAfiC,CAApC;AAiBAG,iBAAiB,CAACW,WAAlB,GAAgC,mBAAhC;AAEA,SAASpB,SAAT,EAAoBS,iBAApB"},"metadata":{},"sourceType":"module"}