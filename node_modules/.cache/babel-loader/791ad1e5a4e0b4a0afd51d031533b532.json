{"ast":null,"code":"function buildProjectionTransform(delta, treeScale, latestTransform) {\n  var transform = \"\";\n  /**\n   * The translations we use to calculate are always relative to the viewport coordinate space.\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n   */\n\n  var xTranslate = delta.x.translate / treeScale.x;\n  var yTranslate = delta.y.translate / treeScale.y;\n\n  if (xTranslate || yTranslate) {\n    transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n  }\n  /**\n   * Apply scale correction for the tree transform.\n   * This will apply scale to the screen-orientated axes.\n   */\n\n\n  if (treeScale.x !== 1 || treeScale.y !== 1) {\n    transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n  }\n\n  if (latestTransform) {\n    var rotate = latestTransform.rotate,\n        rotateX = latestTransform.rotateX,\n        rotateY = latestTransform.rotateY;\n    if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n    if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n    if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n  }\n  /**\n   * Apply scale to match the size of the element to the size we want it.\n   * This will apply scale to the element-orientated axes.\n   */\n\n\n  var elementScaleX = delta.x.scale * treeScale.x;\n  var elementScaleY = delta.y.scale * treeScale.y;\n\n  if (elementScaleX !== 1 || elementScaleY !== 1) {\n    transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n  }\n\n  return transform || \"none\";\n}\n\nexport { buildProjectionTransform };","map":{"version":3,"names":["buildProjectionTransform","delta","treeScale","latestTransform","transform","xTranslate","x","translate","yTranslate","y","rotate","rotateX","rotateY","elementScaleX","scale","elementScaleY"],"sources":["/workspaces/200508238/develop/node_modules/framer-motion/dist/es/projection/styles/transform.mjs"],"sourcesContent":["function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n"],"mappings":"AAAA,SAASA,wBAAT,CAAkCC,KAAlC,EAAyCC,SAAzC,EAAoDC,eAApD,EAAqE;EACjE,IAAIC,SAAS,GAAG,EAAhB;EACA;AACJ;AACA;AACA;AACA;AACA;;EACI,IAAMC,UAAU,GAAGJ,KAAK,CAACK,CAAN,CAAQC,SAAR,GAAoBL,SAAS,CAACI,CAAjD;EACA,IAAME,UAAU,GAAGP,KAAK,CAACQ,CAAN,CAAQF,SAAR,GAAoBL,SAAS,CAACO,CAAjD;;EACA,IAAIJ,UAAU,IAAIG,UAAlB,EAA8B;IAC1BJ,SAAS,yBAAkBC,UAAlB,iBAAmCG,UAAnC,YAAT;EACH;EACD;AACJ;AACA;AACA;;;EACI,IAAIN,SAAS,CAACI,CAAV,KAAgB,CAAhB,IAAqBJ,SAAS,CAACO,CAAV,KAAgB,CAAzC,EAA4C;IACxCL,SAAS,oBAAa,IAAIF,SAAS,CAACI,CAA3B,eAAiC,IAAIJ,SAAS,CAACO,CAA/C,OAAT;EACH;;EACD,IAAIN,eAAJ,EAAqB;IACjB,IAAQO,MAAR,GAAqCP,eAArC,CAAQO,MAAR;IAAA,IAAgBC,OAAhB,GAAqCR,eAArC,CAAgBQ,OAAhB;IAAA,IAAyBC,OAAzB,GAAqCT,eAArC,CAAyBS,OAAzB;IACA,IAAIF,MAAJ,EACIN,SAAS,qBAAcM,MAAd,UAAT;IACJ,IAAIC,OAAJ,EACIP,SAAS,sBAAeO,OAAf,UAAT;IACJ,IAAIC,OAAJ,EACIR,SAAS,sBAAeQ,OAAf,UAAT;EACP;EACD;AACJ;AACA;AACA;;;EACI,IAAMC,aAAa,GAAGZ,KAAK,CAACK,CAAN,CAAQQ,KAAR,GAAgBZ,SAAS,CAACI,CAAhD;EACA,IAAMS,aAAa,GAAGd,KAAK,CAACQ,CAAN,CAAQK,KAAR,GAAgBZ,SAAS,CAACO,CAAhD;;EACA,IAAII,aAAa,KAAK,CAAlB,IAAuBE,aAAa,KAAK,CAA7C,EAAgD;IAC5CX,SAAS,oBAAaS,aAAb,eAA+BE,aAA/B,MAAT;EACH;;EACD,OAAOX,SAAS,IAAI,MAApB;AACH;;AAED,SAASJ,wBAAT"},"metadata":{},"sourceType":"module"}