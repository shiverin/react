{"ast":null,"code":"// src/index.ts\nimport { isDom } from \"@zag-js/dom-query\";\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar hasBlurredWindowRecently = false;\nvar handlers = /* @__PURE__ */new Set();\n\nfunction trigger(modality2, event) {\n  handlers.forEach(function (handler) {\n    return handler(modality2, event);\n  });\n}\n\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\n\nfunction isValidKey(e) {\n  return !(e.metaKey || !isMac && e.altKey || e.ctrlKey || e.key === \"Control\" || e.key === \"Shift\" || e.key === \"Meta\");\n}\n\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\n\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    var target = event.composedPath ? event.composedPath()[0] : event.target;\n    var matches = false;\n\n    try {\n      matches = target.matches(\":focus-visible\");\n    } catch (_unused) {}\n\n    if (matches) return;\n    trigger(\"pointer\", event);\n  }\n}\n\nfunction isVirtualClick(event) {\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  return event.detail === 0 && !event.pointerType;\n}\n\nfunction onClickEvent(e) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    modality = \"virtual\";\n  }\n}\n\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n\n  if (event.target instanceof Element && event.target.hasAttribute(\"tabindex\")) {\n    return;\n  }\n\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\";\n    trigger(\"virtual\", event);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\n\nfunction setupGlobalFocusEvents() {\n  if (!isDom() || hasSetup) {\n    return;\n  }\n\n  var focus = HTMLElement.prototype.focus;\n\n  HTMLElement.prototype.focus = function focusElement() {\n    hasEventBeforeFocus = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    focus.apply(this, args);\n  };\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  document.addEventListener(\"click\", onClickEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n\n  hasSetup = true;\n}\n\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n\n  var handler = function handler() {\n    return fn(isFocusVisible());\n  };\n\n  handlers.add(handler);\n  return function () {\n    handlers.delete(handler);\n  };\n}\n\nfunction trackInteractionModality(fn) {\n  setupGlobalFocusEvents();\n  fn(modality);\n\n  var handler = function handler() {\n    return fn(modality);\n  };\n\n  handlers.add(handler);\n  return function () {\n    handlers.delete(handler);\n  };\n}\n\nfunction setInteractionModality(value) {\n  modality = value;\n  trigger(value, null);\n}\n\nfunction getInteractionModality() {\n  return modality;\n}\n\nexport { getInteractionModality, setInteractionModality, trackFocusVisible, trackInteractionModality };","map":{"version":3,"mappings":"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","names":["isDom","hasSetup","modality","hasEventBeforeFocus","hasBlurredWindowRecently","handlers","Set","trigger","event","forEach","handler","isMac","window","navigator","test","platform","isValidKey","e","metaKey","altKey","ctrlKey","key","onKeyboardEvent","onPointerEvent","type","target","composedPath","matches","isVirtualClick","mozInputSource","isTrusted","detail","pointerType","onClickEvent","onWindowFocus","document","Element","hasAttribute","onWindowBlur","isFocusVisible","setupGlobalFocusEvents","focus","HTMLElement","prototype","focusElement","args","apply","addEventListener","PointerEvent","trackFocusVisible","fn","add","delete","trackInteractionModality","setInteractionModality","value","getInteractionModality"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/node_modules/@zag-js/focus-visible/src/index.ts"],"sourcesContent":["import { isDom } from \"@zag-js/dom-query\"\n\ntype Modality = \"keyboard\" | \"pointer\" | \"virtual\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent | null) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\nlet hasBlurredWindowRecently = false\n\nconst handlers = new Set<Handler>()\n\nfunction trigger(modality: Modality, event: HandlerEvent | null) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(e: KeyboardEvent) {\n  return !(\n    e.metaKey ||\n    (!isMac && e.altKey) ||\n    e.ctrlKey ||\n    e.key === \"Control\" ||\n    e.key === \"Shift\" ||\n    e.key === \"Meta\"\n  )\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    const target = event.composedPath ? event.composedPath()[0] : event.target\n\n    let matches = false\n    try {\n      matches = (target as any).matches(\":focus-visible\")\n    } catch {}\n\n    if (matches) return\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) return true\n  return event.detail === 0 && !(event as PointerEvent).pointerType\n}\n\nfunction onClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true\n    modality = \"virtual\"\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // An extra event is fired when the user first clicks inside an element with tabindex attribute.\n  // We ignore these events so they don't cause keyboard focus ring to appear.\n  if (event.target instanceof Element && event.target.hasAttribute(\"tabindex\")) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    modality = \"virtual\"\n    trigger(\"virtual\", event)\n  }\n\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n  hasBlurredWindowRecently = true\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (!isDom() || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n  document.addEventListener(\"click\", onClickEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function trackInteractionModality(fn: (value: Modality | null) => void) {\n  setupGlobalFocusEvents()\n\n  fn(modality)\n  const handler = () => fn(modality)\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n\nexport function setInteractionModality(value: Modality) {\n  modality = value\n  trigger(value, null)\n}\n\nexport function getInteractionModality() {\n  return modality\n}\n"]},"metadata":{},"sourceType":"module"}