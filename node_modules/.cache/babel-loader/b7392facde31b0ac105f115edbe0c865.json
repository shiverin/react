{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"/workspaces/200508238/develop/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/workspaces/200508238/develop/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { jsx } from 'react/jsx-runtime';\nimport { isBrowser } from '@chakra-ui/utils';\nimport { __unsafe_useEmotionCache } from '@emotion/react';\nimport { useLayoutEffect, useEffect, useState, useMemo, useCallback } from 'react';\nimport { ColorModeContext } from './color-mode-context.mjs';\nimport { getColorModeUtils } from './color-mode.utils.mjs';\nimport { localStorageManager } from './storage-manager.mjs';\n\nvar noop = function noop() {};\n\nvar useSafeLayoutEffect = isBrowser() ? useLayoutEffect : useEffect;\n\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\n\nvar ColorModeProvider = function ColorModeProvider2(props) {\n  var value = props.value,\n      children = props.children,\n      _props$options = props.options;\n  _props$options = _props$options === void 0 ? {} : _props$options;\n  var useSystemColorMode = _props$options.useSystemColorMode,\n      initialColorMode = _props$options.initialColorMode,\n      disableTransitionOnChange = _props$options.disableTransitionOnChange,\n      _props$colorModeManag = props.colorModeManager,\n      colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n\n  var cache = __unsafe_useEmotionCache();\n\n  var defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n\n  var _useState = useState(function () {\n    return getTheme(colorModeManager, defaultColorMode);\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      colorMode = _useState2[0],\n      rawSetColorMode = _useState2[1];\n\n  var _useState3 = useState(function () {\n    return getTheme(colorModeManager);\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resolvedColorMode = _useState4[0],\n      setResolvedColorMode = _useState4[1];\n\n  var _useMemo = useMemo(function () {\n    return getColorModeUtils({\n      preventTransition: disableTransitionOnChange,\n      nonce: cache === null || cache === void 0 ? void 0 : cache.nonce\n    });\n  }, [disableTransitionOnChange, cache === null || cache === void 0 ? void 0 : cache.nonce]),\n      getSystemTheme = _useMemo.getSystemTheme,\n      setClassName = _useMemo.setClassName,\n      setDataset = _useMemo.setDataset,\n      addListener = _useMemo.addListener;\n\n  var resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  var setColorMode = useCallback(function (value2) {\n    var resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(function () {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(function () {\n    var managerValue = colorModeManager.get();\n\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  var toggleColorMode = useCallback(function () {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(function () {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  var context = useMemo(function () {\n    return {\n      colorMode: value !== null && value !== void 0 ? value : resolvedValue,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== void 0\n    };\n  }, [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children: children\n  });\n};\n\nColorModeProvider.displayName = \"ColorModeProvider\";\n\nfunction DarkMode(props) {\n  var context = useMemo(function () {\n    return {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    };\n  }, []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, _objectSpread({\n    value: context\n  }, props));\n}\n\nDarkMode.displayName = \"DarkMode\";\n\nfunction LightMode(props) {\n  var context = useMemo(function () {\n    return {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    };\n  }, []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, _objectSpread({\n    value: context\n  }, props));\n}\n\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"names":["jsx","isBrowser","__unsafe_useEmotionCache","useLayoutEffect","useEffect","useState","useMemo","useCallback","ColorModeContext","getColorModeUtils","localStorageManager","noop","useSafeLayoutEffect","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","ColorModeProvider2","props","value","children","options","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","cache","defaultColorMode","colorMode","rawSetColorMode","resolvedColorMode","setResolvedColorMode","preventTransition","nonce","getSystemTheme","setClassName","setDataset","addListener","resolvedValue","setColorMode","value2","resolved","set","managerValue","toggleColorMode","context","forced","Provider","displayName","DarkMode","LightMode"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/dist/esm/color-mode/color-mode-provider.mjs"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { isBrowser } from '@chakra-ui/utils';\nimport { __unsafe_useEmotionCache } from '@emotion/react';\nimport { useLayoutEffect, useEffect, useState, useMemo, useCallback } from 'react';\nimport { ColorModeContext } from './color-mode-context.mjs';\nimport { getColorModeUtils } from './color-mode.utils.mjs';\nimport { localStorageManager } from './storage-manager.mjs';\n\nconst noop = () => {\n};\nconst useSafeLayoutEffect = isBrowser() ? useLayoutEffect : useEffect;\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nconst ColorModeProvider = function ColorModeProvider2(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const cache = __unsafe_useEmotionCache();\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(\n    () => getTheme(colorModeManager, defaultColorMode)\n  );\n  const [resolvedColorMode, setResolvedColorMode] = useState(\n    () => getTheme(colorModeManager)\n  );\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({\n      preventTransition: disableTransitionOnChange,\n      nonce: cache?.nonce\n    }),\n    [disableTransitionOnChange, cache?.nonce]\n  );\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(\n    (value2) => {\n      const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n      rawSetColorMode(resolved);\n      setClassName(resolved === \"dark\");\n      setDataset(resolved);\n      colorModeManager.set(resolved);\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset]\n  );\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode)\n      return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? resolvedValue,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== void 0\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value]\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, children });\n};\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nLightMode.displayName = \"LightMode\";\n\nexport { ColorModeProvider, DarkMode, LightMode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}