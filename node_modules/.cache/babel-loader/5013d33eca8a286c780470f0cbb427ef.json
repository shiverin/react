{"ast":null,"code":"import _toConsumableArray from \"/workspaces/200508238/develop/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n  return values.map(function () {\n    return easing || easeInOut;\n  }).splice(0, values.length - 1);\n}\n\nfunction defaultOffset(values) {\n  var numValues = values.length;\n  return values.map(function (_value, i) {\n    return i !== 0 ? i / (numValues - 1) : 0;\n  });\n}\n\nfunction convertOffsetToTimes(offset, duration) {\n  return offset.map(function (o) {\n    return o * duration;\n  });\n}\n\nfunction keyframes(_ref) {\n  var keyframeValues = _ref.keyframes,\n      _ref$ease = _ref.ease,\n      ease = _ref$ease === void 0 ? easeInOut : _ref$ease,\n      times = _ref.times,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 300 : _ref$duration;\n  keyframeValues = _toConsumableArray(keyframeValues);\n  var origin = keyframes[0];\n  /**\n   * Easing functions can be externally defined as strings. Here we convert them\n   * into actual functions.\n   */\n\n  var easingFunctions = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);\n  /**\n   * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n   * to reduce GC during animation.\n   */\n\n  var state = {\n    done: false,\n    value: origin\n  };\n  /**\n   * Create a times array based on the provided 0-1 offsets\n   */\n\n  var absoluteTimes = convertOffsetToTimes( // Only use the provided offsets if they're the correct length\n  // TODO Maybe we should warn here if there's a length mismatch\n  times && times.length === keyframes.length ? times : defaultOffset(keyframeValues), duration);\n\n  function createInterpolator() {\n    return interpolate(absoluteTimes, keyframeValues, {\n      ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)\n    });\n  }\n\n  var interpolator = createInterpolator();\n  return {\n    next: function next(t) {\n      state.value = interpolator(t);\n      state.done = t >= duration;\n      return state;\n    },\n    flipTarget: function flipTarget() {\n      keyframeValues.reverse();\n      interpolator = createInterpolator();\n    }\n  };\n}\n\nexport { convertOffsetToTimes, defaultEasing, defaultOffset, keyframes };","map":{"version":3,"names":["easeInOut","interpolate","isEasingArray","easingDefinitionToFunction","defaultEasing","values","easing","map","splice","length","defaultOffset","numValues","_value","i","convertOffsetToTimes","offset","duration","o","keyframes","keyframeValues","ease","times","origin","easingFunctions","state","done","value","absoluteTimes","createInterpolator","Array","isArray","interpolator","next","t","flipTarget","reverse"],"sources":["/workspaces/200508238/develop/node_modules/framer-motion/dist/es/animation/legacy-popmotion/keyframes.mjs"],"sourcesContent":["import { easeInOut } from '../../easing/ease.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { isEasingArray, easingDefinitionToFunction } from '../utils/easing.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n    const numValues = values.length;\n    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\nfunction keyframes({ keyframes: keyframeValues, ease = easeInOut, times, duration = 300, }) {\n    keyframeValues = [...keyframeValues];\n    const origin = keyframes[0];\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframes.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    function createInterpolator() {\n        return interpolate(absoluteTimes, keyframeValues, {\n            ease: Array.isArray(easingFunctions)\n                ? easingFunctions\n                : defaultEasing(keyframeValues, easingFunctions),\n        });\n    }\n    let interpolator = createInterpolator();\n    return {\n        next: (t) => {\n            state.value = interpolator(t);\n            state.done = t >= duration;\n            return state;\n        },\n        flipTarget: () => {\n            keyframeValues.reverse();\n            interpolator = createInterpolator();\n        },\n    };\n}\n\nexport { convertOffsetToTimes, defaultEasing, defaultOffset, keyframes };\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,aAAT,EAAwBC,0BAAxB,QAA0D,qBAA1D;;AAEA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;EACnC,OAAOD,MAAM,CAACE,GAAP,CAAW;IAAA,OAAMD,MAAM,IAAIN,SAAhB;EAAA,CAAX,EAAsCQ,MAAtC,CAA6C,CAA7C,EAAgDH,MAAM,CAACI,MAAP,GAAgB,CAAhE,CAAP;AACH;;AACD,SAASC,aAAT,CAAuBL,MAAvB,EAA+B;EAC3B,IAAMM,SAAS,GAAGN,MAAM,CAACI,MAAzB;EACA,OAAOJ,MAAM,CAACE,GAAP,CAAW,UAACK,MAAD,EAASC,CAAT;IAAA,OAAeA,CAAC,KAAK,CAAN,GAAUA,CAAC,IAAIF,SAAS,GAAG,CAAhB,CAAX,GAAgC,CAA/C;EAAA,CAAX,CAAP;AACH;;AACD,SAASG,oBAAT,CAA8BC,MAA9B,EAAsCC,QAAtC,EAAgD;EAC5C,OAAOD,MAAM,CAACR,GAAP,CAAW,UAACU,CAAD;IAAA,OAAOA,CAAC,GAAGD,QAAX;EAAA,CAAX,CAAP;AACH;;AACD,SAASE,SAAT,OAA4F;EAAA,IAA5DC,cAA4D,QAAvED,SAAuE;EAAA,qBAA5CE,IAA4C;EAAA,IAA5CA,IAA4C,0BAArCpB,SAAqC;EAAA,IAA1BqB,KAA0B,QAA1BA,KAA0B;EAAA,yBAAnBL,QAAmB;EAAA,IAAnBA,QAAmB,8BAAR,GAAQ;EACxFG,cAAc,sBAAOA,cAAP,CAAd;EACA,IAAMG,MAAM,GAAGJ,SAAS,CAAC,CAAD,CAAxB;EACA;AACJ;AACA;AACA;;EACI,IAAMK,eAAe,GAAGrB,aAAa,CAACkB,IAAD,CAAb,GAClBA,IAAI,CAACb,GAAL,CAASJ,0BAAT,CADkB,GAElBA,0BAA0B,CAACiB,IAAD,CAFhC;EAGA;AACJ;AACA;AACA;;EACI,IAAMI,KAAK,GAAG;IAAEC,IAAI,EAAE,KAAR;IAAeC,KAAK,EAAEJ;EAAtB,CAAd;EACA;AACJ;AACA;;EACI,IAAMK,aAAa,GAAGb,oBAAoB,EAC1C;EACA;EACAO,KAAK,IAAIA,KAAK,CAACZ,MAAN,KAAiBS,SAAS,CAACT,MAApC,GACMY,KADN,GAEMX,aAAa,CAACS,cAAD,CALuB,EAKLH,QALK,CAA1C;;EAMA,SAASY,kBAAT,GAA8B;IAC1B,OAAO3B,WAAW,CAAC0B,aAAD,EAAgBR,cAAhB,EAAgC;MAC9CC,IAAI,EAAES,KAAK,CAACC,OAAN,CAAcP,eAAd,IACAA,eADA,GAEAnB,aAAa,CAACe,cAAD,EAAiBI,eAAjB;IAH2B,CAAhC,CAAlB;EAKH;;EACD,IAAIQ,YAAY,GAAGH,kBAAkB,EAArC;EACA,OAAO;IACHI,IAAI,EAAE,cAACC,CAAD,EAAO;MACTT,KAAK,CAACE,KAAN,GAAcK,YAAY,CAACE,CAAD,CAA1B;MACAT,KAAK,CAACC,IAAN,GAAaQ,CAAC,IAAIjB,QAAlB;MACA,OAAOQ,KAAP;IACH,CALE;IAMHU,UAAU,EAAE,sBAAM;MACdf,cAAc,CAACgB,OAAf;MACAJ,YAAY,GAAGH,kBAAkB,EAAjC;IACH;EATE,CAAP;AAWH;;AAED,SAASd,oBAAT,EAA+BV,aAA/B,EAA8CM,aAA9C,EAA6DQ,SAA7D"},"metadata":{},"sourceType":"module"}