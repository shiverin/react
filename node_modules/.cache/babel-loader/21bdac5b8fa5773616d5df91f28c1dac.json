{"ast":null,"code":"import _objectSpread from \"/workspaces/200508238/develop/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/workspaces/200508238/develop/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"onUpdate\", \"onComplete\"];\nimport { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\n\nvar sampleDelta = 10; //ms\n\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  var onUpdate = _ref.onUpdate,\n      onComplete = _ref.onComplete,\n      options = _objectWithoutProperties(_ref, _excluded);\n\n  var keyframes = options.keyframes,\n      _options$duration = options.duration,\n      duration = _options$duration === void 0 ? 0.3 : _options$duration,\n      _options$elapsed = options.elapsed,\n      elapsed = _options$elapsed === void 0 ? 0 : _options$elapsed,\n      ease = options.ease;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n\n  if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n    var sampleAnimation = animate(options);\n    var state = {\n      done: false,\n      value: keyframes[0]\n    };\n    var pregeneratedKeyframes = [];\n    var t = 0;\n\n    while (!state.done) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n\n  var animation = animateStyle(value.owner.current, valueName, keyframes, _objectSpread(_objectSpread({}, options), {}, {\n    delay: -elapsed,\n    duration: duration,\n\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  }));\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n\n  animation.onfinish = function () {\n    value.set(keyframes[keyframes.length - 1]);\n    onComplete && onComplete();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n\n\n  return function () {\n    /**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */\n    var currentTime = animation.currentTime;\n\n    if (currentTime) {\n      var _sampleAnimation = animate(options);\n\n      value.setWithVelocity(_sampleAnimation.sample(currentTime - sampleDelta).value, _sampleAnimation.sample(currentTime).value, sampleDelta);\n    }\n\n    sync.update(function () {\n      return animation.cancel();\n    });\n  };\n}\n\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animate","animateStyle","isWaapiSupportedEasing","sampleDelta","createAcceleratedAnimation","value","valueName","onUpdate","onComplete","options","keyframes","duration","elapsed","ease","type","sampleAnimation","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","delay","onfinish","set","length","currentTime","setWithVelocity","update","cancel"],"sources":["/workspaces/200508238/develop/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    let { keyframes, duration = 0.3, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n        const sampleAnimation = animate(options);\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        let t = 0;\n        while (!state.done) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return () => {\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        const { currentTime } = animation;\n        if (currentTime) {\n            const sampleAnimation = animate(options);\n            value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n        }\n        sync.update(() => animation.cancel());\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,2BAArB;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,sBAAT,QAAuC,cAAvC;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,WAAW,GAAG,EAApB,C,CAAwB;;AACxB,SAASC,0BAAT,CAAoCC,KAApC,EAA2CC,SAA3C,QAA4F;EAAA,IAApCC,QAAoC,QAApCA,QAAoC;EAAA,IAA1BC,UAA0B,QAA1BA,UAA0B;EAAA,IAAXC,OAAW;;EACxF,IAAMC,SAAN,GAAuDD,OAAvD,CAAMC,SAAN;EAAA,wBAAuDD,OAAvD,CAAiBE,QAAjB;EAAA,IAAiBA,QAAjB,kCAA4B,GAA5B;EAAA,uBAAuDF,OAAvD,CAAiCG,OAAjC;EAAA,IAAiCA,OAAjC,iCAA2C,CAA3C;EAAA,IAA8CC,IAA9C,GAAuDJ,OAAvD,CAA8CI,IAA9C;EACA;AACJ;AACA;;EACI,IAAIJ,OAAO,CAACK,IAAR,KAAiB,QAAjB,IAA6B,CAACZ,sBAAsB,CAACO,OAAO,CAACI,IAAT,CAAxD,EAAwE;IACpE,IAAME,eAAe,GAAGf,OAAO,CAACS,OAAD,CAA/B;IACA,IAAIO,KAAK,GAAG;MAAEC,IAAI,EAAE,KAAR;MAAeZ,KAAK,EAAEK,SAAS,CAAC,CAAD;IAA/B,CAAZ;IACA,IAAMQ,qBAAqB,GAAG,EAA9B;IACA,IAAIC,CAAC,GAAG,CAAR;;IACA,OAAO,CAACH,KAAK,CAACC,IAAd,EAAoB;MAChBD,KAAK,GAAGD,eAAe,CAACK,MAAhB,CAAuBD,CAAvB,CAAR;MACAD,qBAAqB,CAACG,IAAtB,CAA2BL,KAAK,CAACX,KAAjC;MACAc,CAAC,IAAIhB,WAAL;IACH;;IACDO,SAAS,GAAGQ,qBAAZ;IACAP,QAAQ,GAAGQ,CAAC,GAAGhB,WAAf;IACAU,IAAI,GAAG,QAAP;EACH;;EACD,IAAMS,SAAS,GAAGrB,YAAY,CAACI,KAAK,CAACkB,KAAN,CAAYC,OAAb,EAAsBlB,SAAtB,EAAiCI,SAAjC,kCACvBD,OADuB;IAE1BgB,KAAK,EAAE,CAACb,OAFkB;IAG1BD,QAAQ,EAARA,QAH0B;;IAI1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQE,IAAI,EAAEA;EAZoB,GAA9B;EAcA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACIS,SAAS,CAACI,QAAV,GAAqB,YAAM;IACvBrB,KAAK,CAACsB,GAAN,CAAUjB,SAAS,CAACA,SAAS,CAACkB,MAAV,GAAmB,CAApB,CAAnB;IACApB,UAAU,IAAIA,UAAU,EAAxB;EACH,CAHD;EAIA;AACJ;AACA;;;EACI,OAAO,YAAM;IACT;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAQqB,WAAR,GAAwBP,SAAxB,CAAQO,WAAR;;IACA,IAAIA,WAAJ,EAAiB;MACb,IAAMd,gBAAe,GAAGf,OAAO,CAACS,OAAD,CAA/B;;MACAJ,KAAK,CAACyB,eAAN,CAAsBf,gBAAe,CAACK,MAAhB,CAAuBS,WAAW,GAAG1B,WAArC,EAAkDE,KAAxE,EAA+EU,gBAAe,CAACK,MAAhB,CAAuBS,WAAvB,EAAoCxB,KAAnH,EAA0HF,WAA1H;IACH;;IACDJ,IAAI,CAACgC,MAAL,CAAY;MAAA,OAAMT,SAAS,CAACU,MAAV,EAAN;IAAA,CAAZ;EACH,CAfD;AAgBH;;AAED,SAAS5B,0BAAT"},"metadata":{},"sourceType":"module"}