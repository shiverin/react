{"ast":null,"code":"'use client';\n\nimport { useRef, useEffect, useCallback } from 'react';\n\nfunction useCallbackRef(callback) {\n  let deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const callbackRef = useRef(callback);\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n  return useCallback(function () {\n    var _callbackRef$current;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);\n  }, deps);\n}\n\nexport { useCallbackRef };","map":{"version":3,"names":["useRef","useEffect","useCallback","useCallbackRef","callback","deps","callbackRef","current","args"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/esm/use-callback-ref.mjs"],"sourcesContent":["'use client';\nimport { useRef, useEffect, useCallback } from 'react';\n\nfunction useCallbackRef(callback, deps = []) {\n  const callbackRef = useRef(callback);\n  useEffect(() => {\n    callbackRef.current = callback;\n  });\n  return useCallback((...args) => callbackRef.current?.(...args), deps);\n}\n\nexport { useCallbackRef };\n"],"mappings":"AAAA;;AACA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,WAA5B,QAA+C,OAA/C;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAA6C;EAAA,IAAXC,IAAW,uEAAJ,EAAI;EAC3C,MAAMC,WAAW,GAAGN,MAAM,CAACI,QAAD,CAA1B;EACAH,SAAS,CAAC,MAAM;IACdK,WAAW,CAACC,OAAZ,GAAsBH,QAAtB;EACD,CAFQ,CAAT;EAGA,OAAOF,WAAW,CAAC;IAAA;;IAAA,kCAAIM,IAAJ;MAAIA,IAAJ;IAAA;;IAAA,+BAAaF,WAAW,CAACC,OAAzB,yDAAa,0BAAAD,WAAW,EAAW,GAAGE,IAAd,CAAxB;EAAA,CAAD,EAA8CH,IAA9C,CAAlB;AACD;;AAED,SAASF,cAAT"},"metadata":{},"sourceType":"module"}