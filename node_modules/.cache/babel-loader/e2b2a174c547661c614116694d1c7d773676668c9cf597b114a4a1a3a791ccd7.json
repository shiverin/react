{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport emailjs from \"emailjs-com\";\nimport { useAlertContext } from \"../context/alertContext\";\nconst useSubmit = () => {\n  _s();\n  const [isLoading, setLoading] = useState(false);\n  const {\n    onOpen\n  } = useAlertContext(); // <-- YOU NEED THIS\n\n  const submit = async formData => {\n    setLoading(true);\n    const templateParams = {\n      user_name: formData.firstName,\n      user_email: formData.email,\n      user_contact: formData.contact,\n      message: formData.comment,\n      submission_time: new Date().toLocaleString()\n    };\n    try {\n      await emailjs.send(\"service_exn8agn\",\n      // Replace with your actual service ID\n      \"template_ufthmxd\",\n      // Replace with your actual template ID\n      templateParams, \"jIcCGsH2zf7fnK5X3\" // Replace with your actual PUBLIC key\n      );\n      onOpen(\"success\", `Thanks for your submission ${formData.firstName}, we will get back to you shortly!`);\n    } catch (error) {\n      console.error(\"EmailJS error:\", error);\n      onOpen(\"error\", \"There was an error sending your message. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    isLoading,\n    submit\n  };\n};\n_s(useSubmit, \"34z7U4qHzExDD7RnBy+zO8dkYns=\", false, function () {\n  return [useAlertContext];\n});\nexport default useSubmit;","map":{"version":3,"names":["useState","emailjs","useAlertContext","useSubmit","_s","isLoading","setLoading","onOpen","submit","formData","templateParams","user_name","firstName","user_email","email","user_contact","contact","message","comment","submission_time","Date","toLocaleString","send","error","console"],"sources":["/Users/shizhen/Documents/vscode/react/src/hooks/useSubmit.js"],"sourcesContent":["import { useState } from \"react\";\nimport emailjs from \"emailjs-com\";\nimport { useAlertContext } from \"../context/alertContext\";\n\nconst useSubmit = () => {\n  const [isLoading, setLoading] = useState(false);\n  const { onOpen } = useAlertContext(); // <-- YOU NEED THIS\n\n  const submit = async (formData) => {\n    setLoading(true);\n\n    const templateParams = {\n      user_name: formData.firstName,\n      user_email: formData.email,\n      user_contact: formData.contact,\n      message: formData.comment,\n      submission_time: new Date().toLocaleString(),\n    };\n\n    try {\n      await emailjs.send(\n        \"service_exn8agn\",      // Replace with your actual service ID\n        \"template_ufthmxd\",     // Replace with your actual template ID\n        templateParams,\n        \"jIcCGsH2zf7fnK5X3\"     // Replace with your actual PUBLIC key\n      );\n      onOpen(\"success\", `Thanks for your submission ${formData.firstName}, we will get back to you shortly!`);\n    } catch (error) {\n      console.error(\"EmailJS error:\", error);\n      onOpen(\"error\", \"There was an error sending your message. Please try again later.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { isLoading, submit };\n};\n\nexport default useSubmit;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,OAAO,MAAM,aAAa;AACjC,SAASC,eAAe,QAAQ,yBAAyB;AAEzD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM;IAAEO;EAAO,CAAC,GAAGL,eAAe,CAAC,CAAC,CAAC,CAAC;;EAEtC,MAAMM,MAAM,GAAG,MAAOC,QAAQ,IAAK;IACjCH,UAAU,CAAC,IAAI,CAAC;IAEhB,MAAMI,cAAc,GAAG;MACrBC,SAAS,EAAEF,QAAQ,CAACG,SAAS;MAC7BC,UAAU,EAAEJ,QAAQ,CAACK,KAAK;MAC1BC,YAAY,EAAEN,QAAQ,CAACO,OAAO;MAC9BC,OAAO,EAAER,QAAQ,CAACS,OAAO;MACzBC,eAAe,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC;IAC7C,CAAC;IAED,IAAI;MACF,MAAMpB,OAAO,CAACqB,IAAI,CAChB,iBAAiB;MAAO;MACxB,kBAAkB;MAAM;MACxBZ,cAAc,EACd,mBAAmB,CAAK;MAC1B,CAAC;MACDH,MAAM,CAAC,SAAS,EAAE,8BAA8BE,QAAQ,CAACG,SAAS,oCAAoC,CAAC;IACzG,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtChB,MAAM,CAAC,OAAO,EAAE,kEAAkE,CAAC;IACrF,CAAC,SAAS;MACRD,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAED,SAAS;IAAEG;EAAO,CAAC;AAC9B,CAAC;AAACJ,EAAA,CAhCID,SAAS;EAAA,QAEMD,eAAe;AAAA;AAgCpC,eAAeC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}