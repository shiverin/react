{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { isBrowser } from '@chakra-ui/utils';\nimport { __unsafe_useEmotionCache } from '@emotion/react';\nimport { useLayoutEffect, useEffect, useState, useMemo, useCallback } from 'react';\nimport { ColorModeContext } from './color-mode-context.mjs';\nimport { getColorModeUtils } from './color-mode.utils.mjs';\nimport { localStorageManager } from './storage-manager.mjs';\n\nconst noop = () => {};\n\nconst useSafeLayoutEffect = isBrowser() ? useLayoutEffect : useEffect;\n\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\n\nconst ColorModeProvider = function ColorModeProvider2(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n\n  const cache = __unsafe_useEmotionCache();\n\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = useState(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = useMemo(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange,\n    nonce: cache?.nonce\n  }), [disableTransitionOnChange, cache?.nonce]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(() => ({\n    colorMode: value ?? resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n};\n\nColorModeProvider.displayName = \"ColorModeProvider\";\n\nfunction DarkMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\n\nDarkMode.displayName = \"DarkMode\";\n\nfunction LightMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\n\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"names":["jsx","isBrowser","__unsafe_useEmotionCache","useLayoutEffect","useEffect","useState","useMemo","useCallback","ColorModeContext","getColorModeUtils","localStorageManager","noop","useSafeLayoutEffect","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","ColorModeProvider2","props","value","children","options","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","cache","defaultColorMode","colorMode","rawSetColorMode","resolvedColorMode","setResolvedColorMode","getSystemTheme","setClassName","setDataset","addListener","preventTransition","nonce","resolvedValue","setColorMode","value2","resolved","set","managerValue","toggleColorMode","context","forced","Provider","displayName","DarkMode","LightMode"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/dist/esm/color-mode/color-mode-provider.mjs"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { isBrowser } from '@chakra-ui/utils';\nimport { __unsafe_useEmotionCache } from '@emotion/react';\nimport { useLayoutEffect, useEffect, useState, useMemo, useCallback } from 'react';\nimport { ColorModeContext } from './color-mode-context.mjs';\nimport { getColorModeUtils } from './color-mode.utils.mjs';\nimport { localStorageManager } from './storage-manager.mjs';\n\nconst noop = () => {\n};\nconst useSafeLayoutEffect = isBrowser() ? useLayoutEffect : useEffect;\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nconst ColorModeProvider = function ColorModeProvider2(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const cache = __unsafe_useEmotionCache();\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(\n    () => getTheme(colorModeManager, defaultColorMode)\n  );\n  const [resolvedColorMode, setResolvedColorMode] = useState(\n    () => getTheme(colorModeManager)\n  );\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({\n      preventTransition: disableTransitionOnChange,\n      nonce: cache?.nonce\n    }),\n    [disableTransitionOnChange, cache?.nonce]\n  );\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(\n    (value2) => {\n      const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n      rawSetColorMode(resolved);\n      setClassName(resolved === \"dark\");\n      setDataset(resolved);\n      colorModeManager.set(resolved);\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset]\n  );\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode)\n      return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? resolvedValue,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== void 0\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value]\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, children });\n};\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  const context = useMemo(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    }),\n    []\n  );\n  return /* @__PURE__ */ jsx(ColorModeContext.Provider, { value: context, ...props });\n}\nLightMode.displayName = \"LightMode\";\n\nexport { ColorModeProvider, DarkMode, LightMode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}