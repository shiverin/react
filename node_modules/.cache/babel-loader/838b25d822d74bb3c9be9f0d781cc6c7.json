{"ast":null,"code":"// src/track-size.ts\nfunction trackElementSize(element, callback) {\n  if (!element) {\n    callback(void 0);\n    return;\n  }\n\n  callback({\n    width: element.offsetWidth,\n    height: element.offsetHeight\n  });\n  const win = element.ownerDocument.defaultView ?? window;\n  const observer = new win.ResizeObserver(entries => {\n    if (!Array.isArray(entries) || !entries.length) return;\n    const [entry] = entries;\n    let width;\n    let height;\n\n    if (\"borderBoxSize\" in entry) {\n      const borderSizeEntry = entry[\"borderBoxSize\"];\n      const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n      width = borderSize[\"inlineSize\"];\n      height = borderSize[\"blockSize\"];\n    } else {\n      width = element.offsetWidth;\n      height = element.offsetHeight;\n    }\n\n    callback({\n      width,\n      height\n    });\n  });\n  observer.observe(element, {\n    box: \"border-box\"\n  });\n  return () => observer.unobserve(element);\n} // src/track-sizes.ts\n\n\nfunction trackElementsSize(options) {\n  const {\n    getNodes,\n    observeMutation = true,\n    callback\n  } = options;\n  const cleanups = [];\n  let firstNode = null;\n\n  function trigger() {\n    const elements = getNodes();\n    firstNode = elements[0];\n    const fns = elements.map((element, index) => trackElementSize(element, size => {\n      callback(size, index);\n    }));\n    cleanups.push(...fns);\n  }\n\n  trigger();\n\n  if (observeMutation) {\n    const fn = trackMutation(firstNode, trigger);\n    cleanups.push(fn);\n  }\n\n  return () => {\n    cleanups.forEach(cleanup => {\n      cleanup === null || cleanup === void 0 ? void 0 : cleanup();\n    });\n  };\n}\n\nfunction trackMutation(el, cb) {\n  var _el$ownerDocument;\n\n  if (!el || !el.parentElement) return;\n  const win = ((_el$ownerDocument = el.ownerDocument) === null || _el$ownerDocument === void 0 ? void 0 : _el$ownerDocument.defaultView) ?? window;\n  const observer = new win.MutationObserver(() => {\n    cb();\n  });\n  observer.observe(el.parentElement, {\n    childList: true\n  });\n  return () => {\n    observer.disconnect();\n  };\n}\n\nexport { trackElementSize, trackElementsSize };","map":{"version":3,"mappings":";AAOO,SAASA,gBAAT,CAA0BC,OAA1B,EAAuDC,QAAvD,EAAsF;EAC3F,IAAI,CAACD,OAAL,EAAc;IACZC,SAAS,MAAT;IACA;EACF;;EAEAA,SAAS;IAAEC,OAAOF,QAAQG,WAAjB;IAA8BC,QAAQJ,QAAQK;EAA9C,CAAT;EAEA,MAAMC,MAAMN,QAAQO,aAAR,CAAsBC,WAAtB,IAAqCC,MAAjD;EAEA,MAAMC,WAAW,IAAIJ,IAAIK,cAAR,CAAwBC,OAAD,IAAa;IACnD,IAAI,CAACC,MAAMC,OAAN,CAAcF,OAAd,CAAD,IAA2B,CAACA,QAAQG,MAAxC,EAAgD;IAEhD,MAAM,CAACC,KAAD,IAAUJ,OAAhB;IACA,IAAIV,KAAJ;IACA,IAAIE,MAAJ;;IAEA,IAAI,mBAAmBY,KAAvB,EAA8B;MAC5B,MAAMC,kBAAkBD,MAAM,eAAN,CAAxB;MACA,MAAME,aAAaL,MAAMC,OAAN,CAAcG,eAAd,IAAiCA,gBAAgB,CAAhB,CAAjC,GAAsDA,eAAzE;MACAf,QAAQgB,WAAW,YAAX,CAAR;MACAd,SAASc,WAAW,WAAX,CAAT;IACF,CALA,MAKO;MACLhB,QAAQF,QAAQG,WAAhB;MACAC,SAASJ,QAAQK,YAAjB;IACF;;IAEAJ,SAAS;MAAEC,KAAF;MAASE;IAAT,CAAT;EACD,CAlBgB,CAAjB;EAoBAM,SAASS,OAAT,CAAiBnB,OAAjB,EAA0B;IAAEoB,KAAK;EAAP,CAA1B;EAEA,OAAO,MAAMV,SAASW,SAAT,CAAmBrB,OAAnB,CAAb;AACF,C;;;AChCO,SAASsB,iBAAT,CAAyDC,OAAzD,EAA+F;EACpG,MAAM;IAAEC,QAAF;IAAYC,kBAAkB,IAA9B;IAAoCxB;EAApC,IAAiDsB,OAAvD;EAEA,MAAMG,WAA4C,EAAlD;EAEA,IAAIC,YAAsB,IAA1B;;EAEA,SAASC,OAAT,GAAmB;IACjB,MAAMC,WAAWL,UAAjB;IACAG,YAAYE,SAAS,CAAT,CAAZ;IACA,MAAMC,MAAMD,SAASE,GAAT,CAAa,CAAC/B,OAAD,EAAUgC,KAAV,KACvBjC,iBAAiBC,OAAjB,EAA2BiC,IAAD,IAAU;MAClChC,SAASgC,IAAT,EAAeD,KAAf;IACD,CAFD,CADU,CAAZ;IAKAN,SAASQ,IAAT,CAAc,GAAGJ,GAAjB;EACF;;EAEAF;;EAEA,IAAIH,eAAJ,EAAqB;IACnB,MAAMU,KAAKC,cAAcT,SAAd,EAAyBC,OAAzB,CAAX;IACAF,SAASQ,IAAT,CAAcC,EAAd;EACF;;EAEA,OAAO,MAAM;IACXT,SAASW,OAAT,CAAkBC,OAAD,IAAa;MAC5BA;IACD,CAFD;EAGF,CAJA;AAKF;;AAEA,SAASF,aAAT,CAAuBG,EAAvB,EAA+CC,EAA/C,EAA+D;EAAA;;EAC7D,IAAI,CAACD,EAAD,IAAO,CAACA,GAAGE,aAAf,EAA8B;EAC9B,MAAMnC,MAAM,yBAAGC,aAAH,wEAAkBC,WAAlB,KAAiCC,MAA7C;EACA,MAAMC,WAAW,IAAIJ,IAAIoC,gBAAR,CAAyB,MAAM;IAC9CF;EACD,CAFgB,CAAjB;EAGA9B,SAASS,OAAT,CAAiBoB,GAAGE,aAApB,EAAmC;IAAEE,WAAW;EAAb,CAAnC;EACA,OAAO,MAAM;IACXjC,SAASkC,UAAT;EACF,CAFA;AAGF","names":["trackElementSize","element","callback","width","offsetWidth","height","offsetHeight","win","ownerDocument","defaultView","window","observer","ResizeObserver","entries","Array","isArray","length","entry","borderSizeEntry","borderSize","observe","box","unobserve","trackElementsSize","options","getNodes","observeMutation","cleanups","firstNode","trigger","elements","fns","map","index","size","push","fn","trackMutation","forEach","cleanup","el","cb","parentElement","MutationObserver","childList","disconnect"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/node_modules/@zag-js/element-size/src/track-size.ts","/workspaces/200508238/develop/node_modules/@chakra-ui/react/node_modules/@zag-js/element-size/src/track-sizes.ts"],"sourcesContent":["export interface ElementSize {\n  width: number\n  height: number\n}\n\nexport type ElementSizeCallback = (size: ElementSize | undefined) => void\n\nexport function trackElementSize(element: HTMLElement | null, callback: ElementSizeCallback) {\n  if (!element) {\n    callback(undefined)\n    return\n  }\n\n  callback({ width: element.offsetWidth, height: element.offsetHeight })\n\n  const win = element.ownerDocument.defaultView ?? window\n\n  const observer = new win.ResizeObserver((entries) => {\n    if (!Array.isArray(entries) || !entries.length) return\n\n    const [entry] = entries\n    let width: number\n    let height: number\n\n    if (\"borderBoxSize\" in entry) {\n      const borderSizeEntry = entry[\"borderBoxSize\"]\n      const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry\n      width = borderSize[\"inlineSize\"]\n      height = borderSize[\"blockSize\"]\n    } else {\n      width = element.offsetWidth\n      height = element.offsetHeight\n    }\n\n    callback({ width, height })\n  })\n\n  observer.observe(element, { box: \"border-box\" })\n\n  return () => observer.unobserve(element)\n}\n","import { trackElementSize, type ElementSize } from \"./track-size\"\n\nexport interface TrackElementsSizeOptions<T extends HTMLElement | null> {\n  getNodes: () => T[]\n  observeMutation?: boolean\n  callback: (size: ElementSize | undefined, index: number) => void\n}\n\nexport function trackElementsSize<T extends HTMLElement | null>(options: TrackElementsSizeOptions<T>) {\n  const { getNodes, observeMutation = true, callback } = options\n\n  const cleanups: Array<VoidFunction | undefined> = []\n\n  let firstNode: T | null = null\n\n  function trigger() {\n    const elements = getNodes()\n    firstNode = elements[0]\n    const fns = elements.map((element, index) =>\n      trackElementSize(element, (size) => {\n        callback(size, index)\n      }),\n    )\n    cleanups.push(...fns)\n  }\n\n  trigger()\n\n  if (observeMutation) {\n    const fn = trackMutation(firstNode, trigger)\n    cleanups.push(fn)\n  }\n\n  return () => {\n    cleanups.forEach((cleanup) => {\n      cleanup?.()\n    })\n  }\n}\n\nfunction trackMutation(el: HTMLElement | null, cb: () => void) {\n  if (!el || !el.parentElement) return\n  const win = el.ownerDocument?.defaultView ?? window\n  const observer = new win.MutationObserver(() => {\n    cb()\n  })\n  observer.observe(el.parentElement, { childList: true })\n  return () => {\n    observer.disconnect()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}