{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"/workspaces/200508238/develop/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useCallback } from 'react';\n\nfunction useButtonType(value) {\n  var _useState = useState(!value),\n      _useState2 = _slicedToArray(_useState, 2),\n      isButton = _useState2[0],\n      setIsButton = _useState2[1];\n\n  var refCallback = useCallback(function (node) {\n    if (!node) return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  var type = isButton ? \"button\" : void 0;\n  return {\n    ref: refCallback,\n    type: type\n  };\n}\n\nexport { useButtonType };","map":{"version":3,"names":["useState","useCallback","useButtonType","value","isButton","setIsButton","refCallback","node","tagName","type","ref"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/dist/esm/button/use-button-type.mjs"],"sourcesContent":["'use client';\nimport { useState, useCallback } from 'react';\n\nfunction useButtonType(value) {\n  const [isButton, setIsButton] = useState(!value);\n  const refCallback = useCallback((node) => {\n    if (!node)\n      return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  const type = isButton ? \"button\" : void 0;\n  return { ref: refCallback, type };\n}\n\nexport { useButtonType };\n"],"mappings":"AAAA;;;AACA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EAC5B,gBAAgCH,QAAQ,CAAC,CAACG,KAAF,CAAxC;EAAA;EAAA,IAAOC,QAAP;EAAA,IAAiBC,WAAjB;;EACA,IAAMC,WAAW,GAAGL,WAAW,CAAC,UAACM,IAAD,EAAU;IACxC,IAAI,CAACA,IAAL,EACE;IACFF,WAAW,CAACE,IAAI,CAACC,OAAL,KAAiB,QAAlB,CAAX;EACD,CAJ8B,EAI5B,EAJ4B,CAA/B;EAKA,IAAMC,IAAI,GAAGL,QAAQ,GAAG,QAAH,GAAc,KAAK,CAAxC;EACA,OAAO;IAAEM,GAAG,EAAEJ,WAAP;IAAoBG,IAAI,EAAJA;EAApB,CAAP;AACD;;AAED,SAASP,aAAT"},"metadata":{},"sourceType":"module"}