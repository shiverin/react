{"ast":null,"code":"'use client';\n\nimport _createForOfIteratorHelper from \"/workspaces/200508238/develop/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { useEffect } from 'react';\n\nfunction useAttributeObserver(ref, attributes, fn, enabled) {\n  useEffect(function () {\n    var _ref$current$ownerDoc;\n\n    if (!ref.current || !enabled) return;\n    var win = (_ref$current$ownerDoc = ref.current.ownerDocument.defaultView) !== null && _ref$current$ownerDoc !== void 0 ? _ref$current$ownerDoc : window;\n    var attrs = Array.isArray(attributes) ? attributes : [attributes];\n    var obs = new win.MutationObserver(function (changes) {\n      var _iterator = _createForOfIteratorHelper(changes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var change = _step.value;\n\n          if (change.type === \"attributes\" && change.attributeName && attrs.includes(change.attributeName)) {\n            fn(change);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n    obs.observe(ref.current, {\n      attributes: true,\n      attributeFilter: attrs\n    });\n    return function () {\n      return obs.disconnect();\n    };\n  });\n}\n\nexport { useAttributeObserver };","map":{"version":3,"names":["useEffect","useAttributeObserver","ref","attributes","fn","enabled","current","win","ownerDocument","defaultView","window","attrs","Array","isArray","obs","MutationObserver","changes","change","type","attributeName","includes","observe","attributeFilter","disconnect"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/dist/esm/number-input/use-attr-observer.mjs"],"sourcesContent":["'use client';\nimport { useEffect } from 'react';\n\nfunction useAttributeObserver(ref, attributes, fn, enabled) {\n  useEffect(() => {\n    if (!ref.current || !enabled)\n      return;\n    const win = ref.current.ownerDocument.defaultView ?? window;\n    const attrs = Array.isArray(attributes) ? attributes : [attributes];\n    const obs = new win.MutationObserver((changes) => {\n      for (const change of changes) {\n        if (change.type === \"attributes\" && change.attributeName && attrs.includes(change.attributeName)) {\n          fn(change);\n        }\n      }\n    });\n    obs.observe(ref.current, { attributes: true, attributeFilter: attrs });\n    return () => obs.disconnect();\n  });\n}\n\nexport { useAttributeObserver };\n"],"mappings":"AAAA;;;AACA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,UAAnC,EAA+CC,EAA/C,EAAmDC,OAAnD,EAA4D;EAC1DL,SAAS,CAAC,YAAM;IAAA;;IACd,IAAI,CAACE,GAAG,CAACI,OAAL,IAAgB,CAACD,OAArB,EACE;IACF,IAAME,GAAG,4BAAGL,GAAG,CAACI,OAAJ,CAAYE,aAAZ,CAA0BC,WAA7B,yEAA4CC,MAArD;IACA,IAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcV,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAAvD;IACA,IAAMW,GAAG,GAAG,IAAIP,GAAG,CAACQ,gBAAR,CAAyB,UAACC,OAAD,EAAa;MAAA,2CAC3BA,OAD2B;MAAA;;MAAA;QAChD,oDAA8B;UAAA,IAAnBC,MAAmB;;UAC5B,IAAIA,MAAM,CAACC,IAAP,KAAgB,YAAhB,IAAgCD,MAAM,CAACE,aAAvC,IAAwDR,KAAK,CAACS,QAAN,CAAeH,MAAM,CAACE,aAAtB,CAA5D,EAAkG;YAChGf,EAAE,CAACa,MAAD,CAAF;UACD;QACF;MAL+C;QAAA;MAAA;QAAA;MAAA;IAMjD,CANW,CAAZ;IAOAH,GAAG,CAACO,OAAJ,CAAYnB,GAAG,CAACI,OAAhB,EAAyB;MAAEH,UAAU,EAAE,IAAd;MAAoBmB,eAAe,EAAEX;IAArC,CAAzB;IACA,OAAO;MAAA,OAAMG,GAAG,CAACS,UAAJ,EAAN;IAAA,CAAP;EACD,CAdQ,CAAT;AAeD;;AAED,SAAStB,oBAAT"},"metadata":{},"sourceType":"module"}