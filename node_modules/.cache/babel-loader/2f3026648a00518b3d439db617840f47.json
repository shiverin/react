{"ast":null,"code":"'use client';\n\nimport { mergeRefs } from '@chakra-ui/hooks';\nimport { createContext } from '@chakra-ui/utils';\nimport { useState, useRef } from 'react';\nimport { DescendantsManager } from './descendant.mjs';\nimport { useSafeLayoutEffect, cast } from './utils.mjs';\n\nfunction createDescendantContext() {\n  const [DescendantsContextProvider, useDescendantsContext] = createContext({\n    name: \"DescendantsProvider\",\n    errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\n  });\n\n  const useDescendant = options => {\n    const descendants = useDescendantsContext();\n    const [index, setIndex] = useState(-1);\n    const ref = useRef(null);\n    useSafeLayoutEffect(() => {\n      return () => {\n        if (!ref.current) return;\n        descendants.unregister(ref.current);\n      };\n    }, []);\n    useSafeLayoutEffect(() => {\n      if (!ref.current) return;\n      const dataIndex = Number(ref.current.dataset[\"index\"]);\n\n      if (index != dataIndex && !Number.isNaN(dataIndex)) {\n        setIndex(dataIndex);\n      }\n    });\n    const refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n    return {\n      descendants,\n      index,\n      enabledIndex: descendants.enabledIndexOf(ref.current),\n      register: mergeRefs(refCallback, ref)\n    };\n  };\n\n  const useDescendants = () => {\n    const descendants = useRef(new DescendantsManager());\n    useSafeLayoutEffect(() => {\n      return () => descendants.current.destroy();\n    });\n    return descendants.current;\n  };\n\n  return [// context provider\n  DescendantsContextProvider, // call this when you need to read from context\n  useDescendantsContext, // descendants state information, to be called and passed to `ContextProvider`\n  useDescendants, // descendant index information\n  useDescendant];\n}\n\nexport { createDescendantContext };","map":{"version":3,"names":["mergeRefs","createContext","useState","useRef","DescendantsManager","useSafeLayoutEffect","cast","createDescendantContext","DescendantsContextProvider","useDescendantsContext","name","errorMessage","useDescendant","options","descendants","index","setIndex","ref","current","unregister","dataIndex","Number","dataset","isNaN","refCallback","register","enabledIndex","enabledIndexOf","useDescendants","destroy"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/dist/esm/descendant/use-descendant.mjs"],"sourcesContent":["'use client';\nimport { mergeRefs } from '@chakra-ui/hooks';\nimport { createContext } from '@chakra-ui/utils';\nimport { useState, useRef } from 'react';\nimport { DescendantsManager } from './descendant.mjs';\nimport { useSafeLayoutEffect, cast } from './utils.mjs';\n\nfunction createDescendantContext() {\n  const [DescendantsContextProvider, useDescendantsContext] = createContext({\n    name: \"DescendantsProvider\",\n    errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\n  });\n  const useDescendant = (options) => {\n    const descendants = useDescendantsContext();\n    const [index, setIndex] = useState(-1);\n    const ref = useRef(null);\n    useSafeLayoutEffect(() => {\n      return () => {\n        if (!ref.current)\n          return;\n        descendants.unregister(ref.current);\n      };\n    }, []);\n    useSafeLayoutEffect(() => {\n      if (!ref.current)\n        return;\n      const dataIndex = Number(ref.current.dataset[\"index\"]);\n      if (index != dataIndex && !Number.isNaN(dataIndex)) {\n        setIndex(dataIndex);\n      }\n    });\n    const refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n    return {\n      descendants,\n      index,\n      enabledIndex: descendants.enabledIndexOf(ref.current),\n      register: mergeRefs(refCallback, ref)\n    };\n  };\n  const useDescendants = () => {\n    const descendants = useRef(new DescendantsManager());\n    useSafeLayoutEffect(() => {\n      return () => descendants.current.destroy();\n    });\n    return descendants.current;\n  };\n  return [\n    // context provider\n    DescendantsContextProvider,\n    // call this when you need to read from context\n    useDescendantsContext,\n    // descendants state information, to be called and passed to `ContextProvider`\n    useDescendants,\n    // descendant index information\n    useDescendant\n  ];\n}\n\nexport { createDescendantContext };\n"],"mappings":"AAAA;;AACA,SAASA,SAAT,QAA0B,kBAA1B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,mBAAT,EAA8BC,IAA9B,QAA0C,aAA1C;;AAEA,SAASC,uBAAT,GAAmC;EACjC,MAAM,CAACC,0BAAD,EAA6BC,qBAA7B,IAAsDR,aAAa,CAAC;IACxES,IAAI,EAAE,qBADkE;IAExEC,YAAY,EAAE;EAF0D,CAAD,CAAzE;;EAIA,MAAMC,aAAa,GAAIC,OAAD,IAAa;IACjC,MAAMC,WAAW,GAAGL,qBAAqB,EAAzC;IACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,CAAC,CAAF,CAAlC;IACA,MAAMe,GAAG,GAAGd,MAAM,CAAC,IAAD,CAAlB;IACAE,mBAAmB,CAAC,MAAM;MACxB,OAAO,MAAM;QACX,IAAI,CAACY,GAAG,CAACC,OAAT,EACE;QACFJ,WAAW,CAACK,UAAZ,CAAuBF,GAAG,CAACC,OAA3B;MACD,CAJD;IAKD,CANkB,EAMhB,EANgB,CAAnB;IAOAb,mBAAmB,CAAC,MAAM;MACxB,IAAI,CAACY,GAAG,CAACC,OAAT,EACE;MACF,MAAME,SAAS,GAAGC,MAAM,CAACJ,GAAG,CAACC,OAAJ,CAAYI,OAAZ,CAAoB,OAApB,CAAD,CAAxB;;MACA,IAAIP,KAAK,IAAIK,SAAT,IAAsB,CAACC,MAAM,CAACE,KAAP,CAAaH,SAAb,CAA3B,EAAoD;QAClDJ,QAAQ,CAACI,SAAD,CAAR;MACD;IACF,CAPkB,CAAnB;IAQA,MAAMI,WAAW,GAAGX,OAAO,GAAGP,IAAI,CAACQ,WAAW,CAACW,QAAZ,CAAqBZ,OAArB,CAAD,CAAP,GAAyCP,IAAI,CAACQ,WAAW,CAACW,QAAb,CAAxE;IACA,OAAO;MACLX,WADK;MAELC,KAFK;MAGLW,YAAY,EAAEZ,WAAW,CAACa,cAAZ,CAA2BV,GAAG,CAACC,OAA/B,CAHT;MAILO,QAAQ,EAAEzB,SAAS,CAACwB,WAAD,EAAcP,GAAd;IAJd,CAAP;EAMD,CA1BD;;EA2BA,MAAMW,cAAc,GAAG,MAAM;IAC3B,MAAMd,WAAW,GAAGX,MAAM,CAAC,IAAIC,kBAAJ,EAAD,CAA1B;IACAC,mBAAmB,CAAC,MAAM;MACxB,OAAO,MAAMS,WAAW,CAACI,OAAZ,CAAoBW,OAApB,EAAb;IACD,CAFkB,CAAnB;IAGA,OAAOf,WAAW,CAACI,OAAnB;EACD,CAND;;EAOA,OAAO,CACL;EACAV,0BAFK,EAGL;EACAC,qBAJK,EAKL;EACAmB,cANK,EAOL;EACAhB,aARK,CAAP;AAUD;;AAED,SAASL,uBAAT"},"metadata":{},"sourceType":"module"}