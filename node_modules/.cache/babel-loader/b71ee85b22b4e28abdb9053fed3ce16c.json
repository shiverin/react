{"ast":null,"code":"'use client';\n\nimport { isMultiTouchEvent, getEventPoint, addPointerEvent } from '@chakra-ui/utils';\nimport sync, { getFrameData, cancelSync } from 'framesync';\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n};\n\nclass PanEvent {\n  constructor(event, handlers, threshold) {\n    /**\n     * We use this to keep track of the `x` and `y` pan session history\n     * as the pan event happens. It helps to calculate the `offset` and `delta`\n     */\n    __publicField(this, \"history\", []); // The pointer event that started the pan session\n\n\n    __publicField(this, \"startEvent\", null); // The current pointer event for the pan session\n\n\n    __publicField(this, \"lastEvent\", null); // The current pointer event info for the pan session\n\n\n    __publicField(this, \"lastEventInfo\", null);\n\n    __publicField(this, \"handlers\", {});\n\n    __publicField(this, \"removeListeners\", () => {});\n    /**\n     * Minimal pan distance required before recognizing the pan.\n     * @default \"3px\"\n     */\n\n\n    __publicField(this, \"threshold\", 3);\n\n    __publicField(this, \"win\");\n\n    __publicField(this, \"updatePoint\", () => {\n      if (!(this.lastEvent && this.lastEventInfo)) return;\n      const info = getPanInfo(this.lastEventInfo, this.history);\n      const isPanStarted = this.startEvent !== null;\n      const isDistancePastThreshold = distance(info.offset, {\n        x: 0,\n        y: 0\n      }) >= this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      const {\n        timestamp\n      } = getFrameData();\n      this.history.push({ ...info.point,\n        timestamp\n      });\n      const {\n        onStart,\n        onMove\n      } = this.handlers;\n\n      if (!isPanStarted) {\n        onStart?.(this.lastEvent, info);\n        this.startEvent = this.lastEvent;\n      }\n\n      onMove?.(this.lastEvent, info);\n    });\n\n    __publicField(this, \"onPointerMove\", (event, info) => {\n      this.lastEvent = event;\n      this.lastEventInfo = info;\n      sync.update(this.updatePoint, true);\n    });\n\n    __publicField(this, \"onPointerUp\", (event, info) => {\n      const panInfo = getPanInfo(info, this.history);\n      const {\n        onEnd,\n        onSessionEnd\n      } = this.handlers;\n      onSessionEnd?.(event, panInfo);\n      this.end();\n      if (!onEnd || !this.startEvent) return;\n      onEnd?.(event, panInfo);\n    });\n\n    this.win = event.view ?? window;\n    if (isMultiTouchEvent(event)) return;\n    this.handlers = handlers;\n\n    if (threshold) {\n      this.threshold = threshold;\n    }\n\n    event.stopPropagation();\n    event.preventDefault();\n    const info = {\n      point: getEventPoint(event)\n    };\n    const {\n      timestamp\n    } = getFrameData();\n    this.history = [{ ...info.point,\n      timestamp\n    }];\n    const {\n      onSessionStart\n    } = handlers;\n    onSessionStart?.(event, getPanInfo(info, this.history));\n    this.removeListeners = pipe(addPointerEvent(this.win, \"pointermove\", this.onPointerMove), addPointerEvent(this.win, \"pointerup\", this.onPointerUp), addPointerEvent(this.win, \"pointercancel\", this.onPointerUp));\n  }\n\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n\n  end() {\n    this.removeListeners?.();\n    cancelSync.update(this.updatePoint);\n  }\n\n}\n\nfunction subtract(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtract(info.point, history[history.length - 1]),\n    offset: subtract(info.point, history[0]),\n    velocity: getVelocity(history, 0.1)\n  };\n}\n\nconst toMilliseconds = v => v * 1e3;\n\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  let i = history.length - 1;\n  let timestampedPoint = null;\n  const lastPoint = history[history.length - 1];\n\n  while (i >= 0) {\n    timestampedPoint = history[i];\n\n    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {\n      break;\n    }\n\n    i--;\n  }\n\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;\n\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n\n  return currentVelocity;\n}\n\nfunction pipe() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return v => fns.reduce((a, b) => b(a), v);\n}\n\nfunction distance1D(a, b) {\n  return Math.abs(a - b);\n}\n\nfunction isPoint(point) {\n  return \"x\" in point && \"y\" in point;\n}\n\nfunction distance(a, b) {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return distance1D(a, b);\n  }\n\n  if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x);\n    const yDelta = distance1D(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n  }\n\n  return 0;\n}\n\nexport { PanEvent, distance };","map":{"version":3,"names":["isMultiTouchEvent","getEventPoint","addPointerEvent","sync","getFrameData","cancelSync","__defProp","Object","defineProperty","__defNormalProp","obj","key","value","enumerable","configurable","writable","__publicField","PanEvent","constructor","event","handlers","threshold","lastEvent","lastEventInfo","info","getPanInfo","history","isPanStarted","startEvent","isDistancePastThreshold","distance","offset","x","y","timestamp","push","point","onStart","onMove","update","updatePoint","panInfo","onEnd","onSessionEnd","end","win","view","window","stopPropagation","preventDefault","onSessionStart","removeListeners","pipe","onPointerMove","onPointerUp","updateHandlers","subtract","a","b","delta","length","velocity","getVelocity","toMilliseconds","v","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity","fns","reduce","distance1D","Math","abs","isPoint","xDelta","yDelta","sqrt"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/node_modules/@chakra-ui/hooks/dist/esm/use-pan-event/pan-event.mjs"],"sourcesContent":["'use client';\nimport { isMultiTouchEvent, getEventPoint, addPointerEvent } from '@chakra-ui/utils';\nimport sync, { getFrameData, cancelSync } from 'framesync';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass PanEvent {\n  constructor(event, handlers, threshold) {\n    /**\n     * We use this to keep track of the `x` and `y` pan session history\n     * as the pan event happens. It helps to calculate the `offset` and `delta`\n     */\n    __publicField(this, \"history\", []);\n    // The pointer event that started the pan session\n    __publicField(this, \"startEvent\", null);\n    // The current pointer event for the pan session\n    __publicField(this, \"lastEvent\", null);\n    // The current pointer event info for the pan session\n    __publicField(this, \"lastEventInfo\", null);\n    __publicField(this, \"handlers\", {});\n    __publicField(this, \"removeListeners\", () => {\n    });\n    /**\n     * Minimal pan distance required before recognizing the pan.\n     * @default \"3px\"\n     */\n    __publicField(this, \"threshold\", 3);\n    __publicField(this, \"win\");\n    __publicField(this, \"updatePoint\", () => {\n      if (!(this.lastEvent && this.lastEventInfo))\n        return;\n      const info = getPanInfo(this.lastEventInfo, this.history);\n      const isPanStarted = this.startEvent !== null;\n      const isDistancePastThreshold = distance(info.offset, { x: 0, y: 0 }) >= this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold)\n        return;\n      const { timestamp } = getFrameData();\n      this.history.push({ ...info.point, timestamp });\n      const { onStart, onMove } = this.handlers;\n      if (!isPanStarted) {\n        onStart?.(this.lastEvent, info);\n        this.startEvent = this.lastEvent;\n      }\n      onMove?.(this.lastEvent, info);\n    });\n    __publicField(this, \"onPointerMove\", (event, info) => {\n      this.lastEvent = event;\n      this.lastEventInfo = info;\n      sync.update(this.updatePoint, true);\n    });\n    __publicField(this, \"onPointerUp\", (event, info) => {\n      const panInfo = getPanInfo(info, this.history);\n      const { onEnd, onSessionEnd } = this.handlers;\n      onSessionEnd?.(event, panInfo);\n      this.end();\n      if (!onEnd || !this.startEvent)\n        return;\n      onEnd?.(event, panInfo);\n    });\n    this.win = event.view ?? window;\n    if (isMultiTouchEvent(event))\n      return;\n    this.handlers = handlers;\n    if (threshold) {\n      this.threshold = threshold;\n    }\n    event.stopPropagation();\n    event.preventDefault();\n    const info = { point: getEventPoint(event) };\n    const { timestamp } = getFrameData();\n    this.history = [{ ...info.point, timestamp }];\n    const { onSessionStart } = handlers;\n    onSessionStart?.(event, getPanInfo(info, this.history));\n    this.removeListeners = pipe(\n      addPointerEvent(this.win, \"pointermove\", this.onPointerMove),\n      addPointerEvent(this.win, \"pointerup\", this.onPointerUp),\n      addPointerEvent(this.win, \"pointercancel\", this.onPointerUp)\n    );\n  }\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n  end() {\n    this.removeListeners?.();\n    cancelSync.update(this.updatePoint);\n  }\n}\nfunction subtract(a, b) {\n  return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtract(info.point, history[history.length - 1]),\n    offset: subtract(info.point, history[0]),\n    velocity: getVelocity(history, 0.1)\n  };\n}\nconst toMilliseconds = (v) => v * 1e3;\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return { x: 0, y: 0 };\n  }\n  let i = history.length - 1;\n  let timestampedPoint = null;\n  const lastPoint = history[history.length - 1];\n  while (i >= 0) {\n    timestampedPoint = history[i];\n    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {\n      break;\n    }\n    i--;\n  }\n  if (!timestampedPoint) {\n    return { x: 0, y: 0 };\n  }\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;\n  if (time === 0) {\n    return { x: 0, y: 0 };\n  }\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n  return currentVelocity;\n}\nfunction pipe(...fns) {\n  return (v) => fns.reduce((a, b) => b(a), v);\n}\nfunction distance1D(a, b) {\n  return Math.abs(a - b);\n}\nfunction isPoint(point) {\n  return \"x\" in point && \"y\" in point;\n}\nfunction distance(a, b) {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return distance1D(a, b);\n  }\n  if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x);\n    const yDelta = distance1D(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n  }\n  return 0;\n}\n\nexport { PanEvent, distance };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}