{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { toCSSVar, css } from '@chakra-ui/styled-system';\nimport { createContext, memoizedGet, runIfFn } from '@chakra-ui/utils';\nimport { ThemeProvider as ThemeProvider$1, Global } from '@emotion/react';\nimport { useMemo } from 'react';\nimport { useColorMode } from '../color-mode/color-mode-context.mjs';\n\nfunction ThemeProvider(props) {\n  const {\n    cssVarsRoot,\n    theme,\n    children\n  } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */jsxs(ThemeProvider$1, {\n    theme: computedTheme,\n    children: [/* @__PURE__ */jsx(CSSVars, {\n      root: cssVarsRoot\n    }), children]\n  });\n}\n\nfunction CSSVars(_ref) {\n  let {\n    root = \":host, :root\"\n  } = _ref;\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => ({\n      [selector]: theme.__cssVars\n    })\n  });\n}\n\nconst [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\n\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\n\nfunction GlobalStyle() {\n  const {\n    colorMode\n  } = useColorMode();\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => {\n      const styleObjectOrFn = memoizedGet(theme, \"styles.global\");\n      const globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return void 0;\n      const styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n}\n\nexport { CSSVars, GlobalStyle, StylesProvider, ThemeProvider, createStylesContext, useStyles };","map":{"version":3,"names":["jsxs","jsx","toCSSVar","css","createContext","memoizedGet","runIfFn","ThemeProvider","ThemeProvider$1","Global","useMemo","useColorMode","props","cssVarsRoot","theme","children","computedTheme","CSSVars","root","selector","join","styles","__cssVars","StylesProvider","useStyles","name","errorMessage","createStylesContext","componentName","GlobalStyle","colorMode","styleObjectOrFn","globalStyles"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/dist/esm/system/providers.mjs"],"sourcesContent":["'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { toCSSVar, css } from '@chakra-ui/styled-system';\nimport { createContext, memoizedGet, runIfFn } from '@chakra-ui/utils';\nimport { ThemeProvider as ThemeProvider$1, Global } from '@emotion/react';\nimport { useMemo } from 'react';\nimport { useColorMode } from '../color-mode/color-mode-context.mjs';\n\nfunction ThemeProvider(props) {\n  const { cssVarsRoot, theme, children } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */ jsxs(ThemeProvider$1, { theme: computedTheme, children: [\n    /* @__PURE__ */ jsx(CSSVars, { root: cssVarsRoot }),\n    children\n  ] });\n}\nfunction CSSVars({ root = \":host, :root\" }) {\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */ jsx(Global, { styles: (theme) => ({ [selector]: theme.__cssVars }) });\n}\nconst [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\nfunction GlobalStyle() {\n  const { colorMode } = useColorMode();\n  return /* @__PURE__ */ jsx(\n    Global,\n    {\n      styles: (theme) => {\n        const styleObjectOrFn = memoizedGet(theme, \"styles.global\");\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode });\n        if (!globalStyles)\n          return void 0;\n        const styles = css(globalStyles)(theme);\n        return styles;\n      }\n    }\n  );\n}\n\nexport { CSSVars, GlobalStyle, StylesProvider, ThemeProvider, createStylesContext, useStyles };\n"],"mappings":"AAAA;;AACA,SAASA,IAAT,EAAeC,GAAf,QAA0B,mBAA1B;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,0BAA9B;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,OAArC,QAAoD,kBAApD;AACA,SAASC,aAAa,IAAIC,eAA1B,EAA2CC,MAA3C,QAAyD,gBAAzD;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,QAA6B,sCAA7B;;AAEA,SAASJ,aAAT,CAAuBK,KAAvB,EAA8B;EAC5B,MAAM;IAAEC,WAAF;IAAeC,KAAf;IAAsBC;EAAtB,IAAmCH,KAAzC;EACA,MAAMI,aAAa,GAAGN,OAAO,CAAC,MAAMR,QAAQ,CAACY,KAAD,CAAf,EAAwB,CAACA,KAAD,CAAxB,CAA7B;EACA,OAAO,eAAgBd,IAAI,CAACQ,eAAD,EAAkB;IAAEM,KAAK,EAAEE,aAAT;IAAwBD,QAAQ,EAAE,CAC7E,eAAgBd,GAAG,CAACgB,OAAD,EAAU;MAAEC,IAAI,EAAEL;IAAR,CAAV,CAD0D,EAE7EE,QAF6E;EAAlC,CAAlB,CAA3B;AAID;;AACD,SAASE,OAAT,OAA4C;EAAA,IAA3B;IAAEC,IAAI,GAAG;EAAT,CAA2B;EAC1C,MAAMC,QAAQ,GAAG,CAACD,IAAD,EAAQ,cAAR,EAAuBE,IAAvB,CAA4B,GAA5B,CAAjB;EACA,OAAO,eAAgBnB,GAAG,CAACQ,MAAD,EAAS;IAAEY,MAAM,EAAGP,KAAD,KAAY;MAAE,CAACK,QAAD,GAAYL,KAAK,CAACQ;IAApB,CAAZ;EAAV,CAAT,CAA1B;AACD;;AACD,MAAM,CAACC,cAAD,EAAiBC,SAAjB,IAA8BpB,aAAa,CAAC;EAChDqB,IAAI,EAAE,eAD0C;EAEhDC,YAAY,EAAE;AAFkC,CAAD,CAAjD;;AAIA,SAASC,mBAAT,CAA6BC,aAA7B,EAA4C;EAC1C,OAAOxB,aAAa,CAAC;IACnBqB,IAAI,EAAG,GAAEG,aAAc,eADJ;IAEnBF,YAAY,EAAG,kFAAiFE,aAAc;EAF3F,CAAD,CAApB;AAID;;AACD,SAASC,WAAT,GAAuB;EACrB,MAAM;IAAEC;EAAF,IAAgBnB,YAAY,EAAlC;EACA,OAAO,eAAgBV,GAAG,CACxBQ,MADwB,EAExB;IACEY,MAAM,EAAGP,KAAD,IAAW;MACjB,MAAMiB,eAAe,GAAG1B,WAAW,CAACS,KAAD,EAAQ,eAAR,CAAnC;MACA,MAAMkB,YAAY,GAAG1B,OAAO,CAACyB,eAAD,EAAkB;QAAEjB,KAAF;QAASgB;MAAT,CAAlB,CAA5B;MACA,IAAI,CAACE,YAAL,EACE,OAAO,KAAK,CAAZ;MACF,MAAMX,MAAM,GAAGlB,GAAG,CAAC6B,YAAD,CAAH,CAAkBlB,KAAlB,CAAf;MACA,OAAOO,MAAP;IACD;EARH,CAFwB,CAA1B;AAaD;;AAED,SAASJ,OAAT,EAAkBY,WAAlB,EAA+BN,cAA/B,EAA+ChB,aAA/C,EAA8DoB,mBAA9D,EAAmFH,SAAnF"},"metadata":{},"sourceType":"module"}