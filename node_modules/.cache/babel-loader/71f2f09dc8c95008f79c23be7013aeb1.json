{"ast":null,"code":"'use client';\n\nimport { createContext as createContext$1, useContext } from 'react';\n\nfunction getErrorMessage(hook, provider) {\n  return \"\".concat(hook, \" returned `undefined`. Seems you forgot to wrap component within \").concat(provider);\n}\n\nfunction createContext() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var name = options.name,\n      _options$strict = options.strict,\n      strict = _options$strict === void 0 ? true : _options$strict,\n      _options$hookName = options.hookName,\n      hookName = _options$hookName === void 0 ? \"useContext\" : _options$hookName,\n      _options$providerName = options.providerName,\n      providerName = _options$providerName === void 0 ? \"Provider\" : _options$providerName,\n      errorMessage = options.errorMessage,\n      defaultValue = options.defaultValue;\n  var Context = createContext$1(defaultValue);\n  Context.displayName = name;\n\n  function useContext$1() {\n    var context = useContext(Context);\n\n    if (!context && strict) {\n      var _Error$captureStackTr;\n\n      var error = new Error(errorMessage !== null && errorMessage !== void 0 ? errorMessage : getErrorMessage(hookName, providerName));\n      error.name = \"ContextError\";\n      (_Error$captureStackTr = Error.captureStackTrace) === null || _Error$captureStackTr === void 0 ? void 0 : _Error$captureStackTr.call(Error, error, useContext$1);\n      throw error;\n    }\n\n    return context;\n  }\n\n  return [Context.Provider, useContext$1, Context];\n}\n\nexport { createContext };","map":{"version":3,"names":["createContext","createContext$1","useContext","getErrorMessage","hook","provider","options","name","strict","hookName","providerName","errorMessage","defaultValue","Context","displayName","useContext$1","context","error","Error","captureStackTrace","Provider"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/node_modules/@chakra-ui/utils/dist/esm/context.mjs"],"sourcesContent":["'use client';\nimport { createContext as createContext$1, useContext } from 'react';\n\nfunction getErrorMessage(hook, provider) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`;\n}\nfunction createContext(options = {}) {\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n    defaultValue\n  } = options;\n  const Context = createContext$1(defaultValue);\n  Context.displayName = name;\n  function useContext$1() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      const error = new Error(\n        errorMessage ?? getErrorMessage(hookName, providerName)\n      );\n      error.name = \"ContextError\";\n      Error.captureStackTrace?.(error, useContext$1);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext$1, Context];\n}\n\nexport { createContext };\n"],"mappings":"AAAA;;AACA,SAASA,aAAa,IAAIC,eAA1B,EAA2CC,UAA3C,QAA6D,OAA7D;;AAEA,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,QAA/B,EAAyC;EACvC,iBAAUD,IAAV,8EAAoFC,QAApF;AACD;;AACD,SAASL,aAAT,GAAqC;EAAA,IAAdM,OAAc,uEAAJ,EAAI;EACnC,IACEC,IADF,GAOID,OAPJ,CACEC,IADF;EAAA,sBAOID,OAPJ,CAEEE,MAFF;EAAA,IAEEA,MAFF,gCAEW,IAFX;EAAA,wBAOIF,OAPJ,CAGEG,QAHF;EAAA,IAGEA,QAHF,kCAGa,YAHb;EAAA,4BAOIH,OAPJ,CAIEI,YAJF;EAAA,IAIEA,YAJF,sCAIiB,UAJjB;EAAA,IAKEC,YALF,GAOIL,OAPJ,CAKEK,YALF;EAAA,IAMEC,YANF,GAOIN,OAPJ,CAMEM,YANF;EAQA,IAAMC,OAAO,GAAGZ,eAAe,CAACW,YAAD,CAA/B;EACAC,OAAO,CAACC,WAAR,GAAsBP,IAAtB;;EACA,SAASQ,YAAT,GAAwB;IACtB,IAAMC,OAAO,GAAGd,UAAU,CAACW,OAAD,CAA1B;;IACA,IAAI,CAACG,OAAD,IAAYR,MAAhB,EAAwB;MAAA;;MACtB,IAAMS,KAAK,GAAG,IAAIC,KAAJ,CACZP,YADY,aACZA,YADY,cACZA,YADY,GACIR,eAAe,CAACM,QAAD,EAAWC,YAAX,CADnB,CAAd;MAGAO,KAAK,CAACV,IAAN,GAAa,cAAb;MACA,yBAAAW,KAAK,CAACC,iBAAN,qFAAAD,KAAK,EAAqBD,KAArB,EAA4BF,YAA5B,CAAL;MACA,MAAME,KAAN;IACD;;IACD,OAAOD,OAAP;EACD;;EACD,OAAO,CAACH,OAAO,CAACO,QAAT,EAAmBL,YAAnB,EAAiCF,OAAjC,CAAP;AACD;;AAED,SAASb,aAAT"},"metadata":{},"sourceType":"module"}