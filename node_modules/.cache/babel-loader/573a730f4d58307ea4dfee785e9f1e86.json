{"ast":null,"code":"import { focusOn } from './commands';\nimport { focusSolver } from './focusSolver';\nvar guardCount = 0;\nvar lockDisabled = false;\n/**\n * The main functionality of the focus-lock package\n *\n * Contains focus at a given node.\n * The last focused element will help to determine which element(first or last) should be focused.\n * The found element will be focused.\n *\n * This is one time action (move), not a persistent focus-lock\n *\n * HTML markers (see {@link import('./constants').FOCUS_AUTO} constants) can control autofocus\n * @see {@link focusSolver} for the same functionality without autofocus\n */\n\nexport var moveFocusInside = function (topNode, lastNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var focusable = focusSolver(topNode, lastNode); // global local side effect to countain recursive lock activation and resolve focus-fighting\n\n  if (lockDisabled) {\n    return;\n  }\n\n  if (focusable) {\n    /** +FOCUS-FIGHTING prevention **/\n    if (guardCount > 2) {\n      // we have recursive entered back the lock activation\n      console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' + 'See https://github.com/theKashey/focus-lock/#focus-fighting');\n      lockDisabled = true;\n      setTimeout(function () {\n        lockDisabled = false;\n      }, 1);\n      return;\n    }\n\n    guardCount++;\n    focusOn(focusable.node, options.focusOptions);\n    guardCount--;\n  }\n};","map":{"version":3,"names":["focusOn","focusSolver","guardCount","lockDisabled","moveFocusInside","topNode","lastNode","options","focusable","console","error","setTimeout","node","focusOptions"],"sources":["/workspaces/200508238/develop/node_modules/@chakra-ui/react/node_modules/focus-lock/dist/es2015/moveFocusInside.js"],"sourcesContent":["import { focusOn } from './commands';\nimport { focusSolver } from './focusSolver';\nvar guardCount = 0;\nvar lockDisabled = false;\n/**\n * The main functionality of the focus-lock package\n *\n * Contains focus at a given node.\n * The last focused element will help to determine which element(first or last) should be focused.\n * The found element will be focused.\n *\n * This is one time action (move), not a persistent focus-lock\n *\n * HTML markers (see {@link import('./constants').FOCUS_AUTO} constants) can control autofocus\n * @see {@link focusSolver} for the same functionality without autofocus\n */\nexport var moveFocusInside = function (topNode, lastNode, options) {\n    if (options === void 0) { options = {}; }\n    var focusable = focusSolver(topNode, lastNode);\n    // global local side effect to countain recursive lock activation and resolve focus-fighting\n    if (lockDisabled) {\n        return;\n    }\n    if (focusable) {\n        /** +FOCUS-FIGHTING prevention **/\n        if (guardCount > 2) {\n            // we have recursive entered back the lock activation\n            console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' +\n                'See https://github.com/theKashey/focus-lock/#focus-fighting');\n            lockDisabled = true;\n            setTimeout(function () {\n                lockDisabled = false;\n            }, 1);\n            return;\n        }\n        guardCount++;\n        focusOn(focusable.node, options.focusOptions);\n        guardCount--;\n    }\n};\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA,IAAIC,YAAY,GAAG,KAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,OAA7B,EAAsC;EAC/D,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe;;EACzC,IAAIC,SAAS,GAAGP,WAAW,CAACI,OAAD,EAAUC,QAAV,CAA3B,CAF+D,CAG/D;;EACA,IAAIH,YAAJ,EAAkB;IACd;EACH;;EACD,IAAIK,SAAJ,EAAe;IACX;IACA,IAAIN,UAAU,GAAG,CAAjB,EAAoB;MAChB;MACAO,OAAO,CAACC,KAAR,CAAc,2FACV,6DADJ;MAEAP,YAAY,GAAG,IAAf;MACAQ,UAAU,CAAC,YAAY;QACnBR,YAAY,GAAG,KAAf;MACH,CAFS,EAEP,CAFO,CAAV;MAGA;IACH;;IACDD,UAAU;IACVF,OAAO,CAACQ,SAAS,CAACI,IAAX,EAAiBL,OAAO,CAACM,YAAzB,CAAP;IACAX,UAAU;EACb;AACJ,CAvBM"},"metadata":{},"sourceType":"module"}