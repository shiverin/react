{"ast":null,"code":"import React from\"react\";import FullScreenSection from\"./FullScreenSection\";import{Box,Heading}from\"@chakra-ui/react\";import Card from\"./Card\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const projects=[{title:\"WhatsApp Clone\",description:\"Developed a full-stack, real-time messaging web app as a single-page application (SPA) using Django, Django Channels, and WebSockets. The app provides reload-free navigation and instant messaging between users, with features like phone number authentication, user search, chat archiving, message read indicators, and profile editing. Deployed on Render with ASGI for real-time communication and integrated with a managed PostgreSQL database on Supabase for robust, scalable backend storage.\",getImageSrc:()=>require(\"../images/whatsapp.png\"),url:\"https://github.com/shiverin/messenger\"},{title:\"Traffic Sign Classification with CNN using TensorFlow\",description:\"Developed a convolutional neural network (CNN) using TensorFlow to classify traffic signs from the German Traffic Sign Recognition Benchmark (GTSRB) dataset. The project explored multiple CNN architectures, achieving a top test accuracy of 98.97% by optimizing network depth, dropout regularization, and training parameters.\",getImageSrc:()=>require(\"../images/trafficSigns.jpg\"),url:\"https://github.com/shiverin/CNNTraffic\"},{title:\"AI Crossword Solver\",description:\"Developed an AI crossword puzzle solver using Constraint Satisfaction Problem (CSP) techniques to generate valid crossword solutions from a grid structure and word list. This project applies classical AI search algorithms and heuristics to efficiently explore complex solution spaces.\",getImageSrc:()=>require(\"../images/crossword.png\"),url:\"https://github.com/shiverin/crosswords\"},{title:\"NimAI\",description:\"Developed an AI agent that learns to play Nim using Q-learning. Implemented core Q-learning concepts: state-action value functions (Q-values), Q-table updates, and an epsilon-greedy policy balancing exploration and exploitation.\",getImageSrc:()=>require(\"../images/nim.png\"),url:\"https://github.com/shiverin/nimAI\"},{title:\"TicTacToeAI\",description:\"This project implements an AI Tic Tac Toe player using the Minimax algorithm with recursive decision-making. The AI evaluates all possible moves to select the optimal action.\",getImageSrc:()=>require(\"../images/tictactoe.png\"),url:\"https://github.com/shiverin/TTTAi\"},{title:\"PageRanker\",description:\"Implemented the PageRank algorithm in Python to rank webpages based on link structure. Built a web crawler and computed ranks using both Monte Carlo sampling and iterative matrix methods, applying concepts from probability and graph theory.\",getImageSrc:()=>require(\"../images/pagerank.png\"),url:\"https://github.com/shiverin/pageranker\"},{title:\"PDFiledit\",description:\"PDFILEdit is a Flask-based web app that enables seamless editing, signing, merging, and converting of PDF files directly in the browser. It leverages session-based file management and dynamic tool rendering based on user uploads.\",getImageSrc:()=>require(\"../images/pdfile.jpg\"),url:\"https://github.com/shiverin/PDFILEdit\"},{title:\"Finance Portfolio App\",description:\"Developed a finance app using Python Flask for the backend, linked to a PostgreSQL server on Render. The app features stock quotes, portfolio management, and buy/sell functionality, with basic HTML and CSS for the frontend.\",getImageSrc:()=>require(\"../images/finance.png\"),url:\"https://github.com/shiverin/finance\"}];const ProjectsSection=()=>{return/*#__PURE__*/_jsxs(FullScreenSection,{backgroundColor://\"#4C5C68\"\n//\"#D4AF37\"\n\"#121212\",isDarkBackground:true,p:8,alignItems:\"flex-start\",spacing:8,children:[/*#__PURE__*/_jsx(Heading,{as:\"h1\",id:\"projects-section\",color:\"#DAA520\",children:\"Featured Projects\"}),/*#__PURE__*/_jsx(Box,{display:\"grid\",gridTemplateColumns:{base:\"repeat(1, minmax(0, 1fr))\",// mobile\nmd:\"repeat(2, minmax(0, 1fr))\"// desktop (>=768px)\n},gridGap:8,children:projects.map(project=>/*#__PURE__*/_jsx(Card,{title:project.title,description:project.description,imageSrc:project.getImageSrc(),url:project.url},project.title))})]});};export default ProjectsSection;","map":{"version":3,"names":["React","FullScreenSection","Box","Heading","Card","jsx","_jsx","jsxs","_jsxs","projects","title","description","getImageSrc","require","url","ProjectsSection","backgroundColor","isDarkBackground","p","alignItems","spacing","children","as","id","color","display","gridTemplateColumns","base","md","gridGap","map","project","imageSrc"],"sources":["/Users/shizhen/Documents/vscode/react/src/components/ProjectsSection.js"],"sourcesContent":["import React from \"react\";\nimport FullScreenSection from \"./FullScreenSection\";\nimport { Box, Heading } from \"@chakra-ui/react\";\nimport Card from \"./Card\";\n\nconst projects = [\n  {\n    title: \"WhatsApp Clone\",\n    description:\n      \"Developed a full-stack, real-time messaging web app as a single-page application (SPA) using Django, Django Channels, and WebSockets. The app provides reload-free navigation and instant messaging between users, with features like phone number authentication, user search, chat archiving, message read indicators, and profile editing. Deployed on Render with ASGI for real-time communication and integrated with a managed PostgreSQL database on Supabase for robust, scalable backend storage.\",\n    getImageSrc: () => require(\"../images/whatsapp.png\"),\n    url: \"https://github.com/shiverin/messenger\",\n  },\n  {\n    title: \"Traffic Sign Classification with CNN using TensorFlow\",\n    description:\n      \"Developed a convolutional neural network (CNN) using TensorFlow to classify traffic signs from the German Traffic Sign Recognition Benchmark (GTSRB) dataset. The project explored multiple CNN architectures, achieving a top test accuracy of 98.97% by optimizing network depth, dropout regularization, and training parameters.\",\n    getImageSrc: () => require(\"../images/trafficSigns.jpg\"),\n    url: \"https://github.com/shiverin/CNNTraffic\",\n  },\n    {\n    title: \"AI Crossword Solver\",\n    description:\n      \"Developed an AI crossword puzzle solver using Constraint Satisfaction Problem (CSP) techniques to generate valid crossword solutions from a grid structure and word list. This project applies classical AI search algorithms and heuristics to efficiently explore complex solution spaces.\",\n    getImageSrc: () => require(\"../images/crossword.png\"),\n    url: \"https://github.com/shiverin/crosswords\",\n  },\n  {\n    title: \"NimAI\",\n    description:\n      \"Developed an AI agent that learns to play Nim using Q-learning. Implemented core Q-learning concepts: state-action value functions (Q-values), Q-table updates, and an epsilon-greedy policy balancing exploration and exploitation.\",\n    getImageSrc: () => require(\"../images/nim.png\"),\n    url: \"https://github.com/shiverin/nimAI\",\n  },\n      {\n    title: \"TicTacToeAI\",\n    description:\n      \"This project implements an AI Tic Tac Toe player using the Minimax algorithm with recursive decision-making. The AI evaluates all possible moves to select the optimal action.\",\n    getImageSrc: () => require(\"../images/tictactoe.png\"),\n    url: \"https://github.com/shiverin/TTTAi\",\n  },\n  {\n    title: \"PageRanker\",\n    description: \n      \"Implemented the PageRank algorithm in Python to rank webpages based on link structure. Built a web crawler and computed ranks using both Monte Carlo sampling and iterative matrix methods, applying concepts from probability and graph theory.\",\n    getImageSrc: () => require(\"../images/pagerank.png\"),\n    url: \"https://github.com/shiverin/pageranker\"\n  },\n      {\n    title: \"PDFiledit\",\n    description:\n      \"PDFILEdit is a Flask-based web app that enables seamless editing, signing, merging, and converting of PDF files directly in the browser. It leverages session-based file management and dynamic tool rendering based on user uploads.\",\n    getImageSrc: () => require(\"../images/pdfile.jpg\"),\n    url: \"https://github.com/shiverin/PDFILEdit\",\n  },\n  {\n    title: \"Finance Portfolio App\",\n    description:\n      \"Developed a finance app using Python Flask for the backend, linked to a PostgreSQL server on Render. The app features stock quotes, portfolio management, and buy/sell functionality, with basic HTML and CSS for the frontend.\",\n    getImageSrc: () => require(\"../images/finance.png\"),\n    url: \"https://github.com/shiverin/finance\",\n  },\n];\n\nconst ProjectsSection = () => {\n  return (\n    <FullScreenSection\n      backgroundColor=\n      //\"#4C5C68\"\n      //\"#D4AF37\"\n      \"#121212\"\n      isDarkBackground\n      p={8}\n      alignItems=\"flex-start\"\n      spacing={8}\n    >\n      <Heading as=\"h1\" id=\"projects-section\" color=\"#DAA520\">\n        Featured Projects\n      </Heading>\n      <Box\n        display=\"grid\"\n        gridTemplateColumns={{\n          base: \"repeat(1, minmax(0, 1fr))\", // mobile\n          md: \"repeat(2, minmax(0, 1fr))\",   // desktop (>=768px)\n        }}\n        gridGap={8}\n      >\n        {projects.map((project) => (\n          <Card\n            key={project.title}\n            title={project.title}\n            description={project.description}\n            imageSrc={project.getImageSrc()}\n            url={project.url}\n          />\n        ))}\n      </Box>\n    </FullScreenSection>\n  );\n};\n\nexport default ProjectsSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}